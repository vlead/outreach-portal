#+TITLE: Back end for Outreach Portal 
#+AUTHOR: VLEAD
#+DATE: [2015-10-27 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil

* Introduction
  This document captures the DB layer and REST APIs of the outreach
  portal, along with their test cases. 

* Requirements
  This release (outreach portal - nodal coordinator release), fulfills the
  following requirements:

  1. Python API that acts as a wrapper to make CRUD operations on the
     entities - workshops, nodal_coordinator_details, nodal_centres,
     college_reports, attendance_sheets, workshop_photos, feedbacks.

  2. REST API for various applications to perform CRUD operations on the
     entities - workshops, nodal_coordinator_details, nodal_centres,
     college_reports, attendance_sheets, workshop_photos, feedbacks.
  
* Design and Implementation
** Some initialization and boilerplate code
*** __init__
#+BEGIN_SRC python :tangle __init__.py :eval no
print "src package"
import db
import app
import config
#+END_SRC
*** __init__ for Tests
#+BEGIN_SRC python :tangle tests/__init__.py :eval no
#something
print "test package"
#+END_SRC

*** Imports for Python AP
#+BEGIN_SRC python :tangle db.py :eval no
# -*- coding: utf-8 -*-

from collections import OrderedDict

from flask_sqlalchemy import SQLAlchemy
from flask import current_app, request
from sqlalchemy.orm import relationship
import sqlalchemy.types as types

from flask import current_app

import os
import re
from urlparse import urlparse
from datetime import datetime
import json

from op_exceptions import AttributeRequired
from utils import typecheck

db = SQLAlchemy()


# Abstract class to hold common methods
class Entity(db.Model):

    __abstract__ = True

    # save a db.Model to the database. commit it.
    def save(self):
        db.session.add(self)
        db.session.commit()

    # update the object, and commit to the database
    def update(self, **kwargs):
        for attr, val in kwargs.iteritems():
            setter_method = "set_" + attr
            try:
                self.__getattribute__(setter_method)(val)
            except Exception as e:
                raise e

        self.save()

    #print "Setting new val"
    #print "Calling %s on %s" % (method_to_set, curr_entity)
    #try:
    #    getattr(record, method_to_set)(new_val)
    #except Exception as e:
    #pass

    def delete(self):
        db.session.delete(self)
        db.session.commit()

#+END_SRC

*** Imports for REST API
   The Python code to have the imports, boilerplate code etc. for the
   APIs.  We are using Flask blueprints to make the API, and then we
   can plug this blueprint in our main application. [[http://flask.pocoo.org/docs/0.10/blueprints/][More on Flask
   blueprints]].
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
# -*- coding: utf-8 -*-

import os
import csv
import requests
import uuid
from datetime import datetime
import inspect
from flask import session, render_template, Blueprint, request, jsonify, abort,\
    current_app, redirect, url_for
from config import *
from flask import current_app

from flask import Flask, redirect, url_for
from werkzeug import secure_filename
from flask_oauthlib.client import OAuth
from db import *
from utils import parse_request, jsonify_list
from maps import *
api = Blueprint('APIs', __name__)
#+END_SRC
*** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle tests/test_db.py :eval no

# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
from datetime import datetime
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC

*** Imports and Initialization of testcases for REST API
#+BEGIN_SRC python :tangle tests/test_api.py :eval no
# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
# import json

from src.db import *
from src.api import *
from src.app import create_app
from src.op_exceptions import AttributeRequired

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC

** The Data Model
*** ER Diagram
    [[../img/model-diagram.jpg][schema diagram]] 
*** Name
     
    Name is an alphabetical string.

#+BEGIN_SRC python :tangle db.py :eval no
class Name(object):
    def __init__(self, value):
        # if the string contains any non-alphabet and non-space character, raise
        # a type error
        if re.search('[^a-zA-Z. ]+', value):
            current_app.logger.debug("%s is not a Name type! "  % value)
            raise TypeError('%s is not a Name type!' % value)

        self.value = value

#+END_SRC
    
*** Email

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].  Following
     is the constructor for this class.

#+BEGIN_SRC python :tangle db.py :eval no
class Email(object):
    def __init__(self, value):
        if not re.search('[^@]+@[^@]+\.[^@]+', value):
            current_app.logger.debug("%s is not an Email type! "  % value)
            raise TypeError('%s is not an email!' % value)
        self.value = value
        
#+END_SRC
     
*** Tests for Custom Types
#+BEGIN_SRC python :tangle tests/test_db.py :eval no

class TestCustomTypes(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    # Test the Name type
    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")

    # Test the Email type
    def test_email_type(self):
        print "test_email_type"
        new_email = Email("smith@gmail.com")
        # correct name
        self.assertEqual(new_email.value, "smith@gmail.com")
        # incorrect name
        self.assertRaises(TypeError, Email, "@@@@smithgmail.com")
        
#+END_SRC

*** Role
**** Immutable data
     + Id

**** Mutable data
     + Role Name

**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class Role(Entity):

    __tablename__ = 'roles'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)

    users = db.relationship('User', backref='role')
        
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    role = Role(name=<instance of class Name>)
                    
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            current_app.logger.debug("mandatory attribute `name` is missing")
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

#+END_SRC
**** Tests for Role Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestRole(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_role_constructor(self):
        print "test_role_constructor"
        name = Name("Admin")
        role = Role(name=name)
        self.assertEqual(isinstance(role, Role), True)

        # Calling the institute constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, Role)

        # Calling the role constructor with necessary arguments
        # (name) but with wrong type should raise TypeError
        self.assertRaises(TypeError, Role,
                          ,**{'name': "Admin"
                            })

#+END_SRC
**** Functions that operate on the Role domain
***** getRole: Id --> Role
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by Role id: %s"  % id)
        return Role.query.get(id)
#+END_SRC
***** Test getRole: Id --> Role
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_role_by_id(self):
        print "test_get_role_by_id"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual(role.get_by_id(1).name, "Admin")

#+END_SRC
***** getAll: Nil --> set[Role]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of Role entity")
        return Role.query.all()
#+END_SRC
***** Test getAll: Nil --> set[Role]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_role_get_all(self):
        print "test_role_get_all"
        role1 = Role(name=Name("Admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        roles_list = Role.get_all()

        self.assertEqual("Admin", roles_list[0].name)
        self.assertEqual("OC", roles_list[1].name)
        self.assertEqual("NC", roles_list[2].name)

#+END_SRC
***** getName: Role --> Name
#+BEGIN_SRC python :tangle db.py :eval no
    def get_name(self):
        current_app.logger.debug("get name of the Role: %s" % self.name)
        return self.name

#+END_SRC
***** Test getName: Role --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_role_name(self):
        print "test_get_role_name"
        role = Role(name=Name("Admin"))
        role_name = role.get_name()
        self.assertEqual(role_name, "Admin")
#+END_SRC

***** setName: Role, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name.value
#+END_SRC
***** Test setName: Role, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_role_name(self):
        print "test_set_role_name"
        role = Role(name=Name("Admin"))
        new_name = Name("OC")
        role.set_name(new_name)
        self.assertEqual(role.name, "OC")
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name
        }

#+END_SRC
	
***** Test Role to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_role_to_client(self):
        print "test_role_to_client"
        role = Role(name=Name("Admin"))
        role.save()
        role = Role.get_by_id(1)
        role_dict = role.to_client()
        self.assertEqual("Admin", role_dict['name'])
#+END_SRC
*** User
**** Immutable data
     + Id
     + Created

**** Mutable data
     + Name
     + Email
     + Role --> Id
     + Last Active
     + Intitue Name
**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class User(Entity):

    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    email = db.Column(db.String(128), unique=True)
    user_status = db.Column(db.String(128))
    phone = db.Column(db.String(128))
    institute_name = db.Column(db.String(128))
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))
    reference_documents = db.relationship('ReferenceDocument', backref='user')
    created = db.Column(db.String(128))
    last_active = db.Column(db.String(128))
    workshops = db.relationship('Workshop', backref='user')

 #+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    User = User(name=<instance of class Name>,
                email=<instance of class Email>,
                role=<instance of class Role>
                [,last_active=str]
                [,created=str]
                [,institute_name=str])
                                            
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            current_app.logger.debug("mandatory attribute `name` is missing")
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'email' not in kwargs:
            current_app.logger.debug("mandatory attribute `email` is missing")
            raise AttributeRequired("mandatory attribute `email` is missing")
        self.set_email(kwargs['email'])
         
        if 'phone' in kwargs:
            self.set_phone(kwargs['phone'])
 
        if 'role' not in kwargs:
            current_app.logger.debug("mandatory attribute `role` is missing")
            raise AttributeRequired("mandatory attribute `role` is missing")
        self.set_role(kwargs['role'])

        if 'last_active' in kwargs:
            current_app.logger.debug("mandatory attribute `last_active` is missing")
            self.set_last_active(kwargs['last_active'])

        if 'created' in kwargs:
            self.set_toc(kwargs['created'])

        if 'institute_name' in kwargs:
            self.set_institute_name(kwargs['institute_name'])
        
        if 'user_status' in kwargs:
            self.set_user_status(kwargs['user_status'])                
        
    def __str__(self):
        return "Name = %s, e-mail id = %s,\ created = %s,\
        institute_name = %s, role=%s, last_active = %s"\
        % (self.name, self.email, self.created,
           self.institute_name, self.role.name,
           self.last_active)

    def __repr__(self):
        return "Name = %s, e-mail id = %s, created=%s\
        institute_name = %s, role=%s, last_active = %s"\
        % (self.name, self.email, self.created,
           self.institute_name, self.role.name,
           self.last_active)

#+END_SRC
     
**** Tests for User Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_user_constructor(self):
        print "test_user_constructor"
        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()
        self.assertEqual("Ambika", user.name)
        self.assertEqual("ambika@vlabs.ac.in", user.email)

        # Calling the user constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, User)

        # Calling the user constructor with necessary arguments
        # (name, email and role) but with wrong type should raise TypeError
        self.assertRaises(TypeError, User,
                          ,**{'name': "Admin",
                             'email': "ambika@vlabs.ac.in",
                             'role': role
                            })

#+END_SRC
**** Functions that operate on the Role domain
***** getAll: Nil --> set[User]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of User entity")
        return User.query.all()

#+END_SRC
***** Test getAll: Nil --> set[User]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_user_get_all(self):
        print "test_user_get_all"
        role = Role(name=Name("Admin"))
        user_1 = User(name=Name("Thirumal Ravula"),
                      email=Email("travula@gmail.com"), role=role)
        user_2 = User(name=Name("Anon Ray"),
                      email=Email("anon.ray@gmail.com"), role=role)

        user_1.save()
        user_2.save()

        user_list = User.get_all()

        self.assertEqual("travula@gmail.com", user_list[0].email)
        self.assertEqual("Thirumal Ravula", user_list[0].name)
        self.assertEqual("Admin", user_list[0].role.name)
        self.assertEqual("anon.ray@gmail.com", user_list[1].email)
        self.assertEqual("Anon Ray", user_list[1].name)
        self.assertEqual("Admin", user_list[1].role.name)
#+END_SRC
***** getUser: Id --> User
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by User id: %s"  % id)
        return User.query.get(id)

#+END_SRC
***** Test getUser: Id --> User
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_by_id(self):
        print "test_get_user_by_id"
        role = Role(name=Name("Admin"))
        role.save()
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        self.assertEqual(user.get_by_id(1).name, "ambika")
#+END_SRC

***** getName: User --> Name
#+BEGIN_SRC python :tangle db.py :eval no
    def get_name(self):
        current_app.logger.debug("get name of the User: %s" % self.name)
        return self.name
#+END_SRC

***** Test getName: User --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_name(self):
        print "test_get_user_name"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user_name = user.get_name()
        self.assertEqual(user_name, "ambika")
#+END_SRC

***** getEmail: User --> Email
#+BEGIN_SRC python :tangle db.py :eval no
    def get_email(self):
        current_app.logger.debug("get email of the User: %s" % self.email)
        return self.email
#+END_SRC

***** Test getEmail: User --> Email
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_email(self):
        print "test_get_user_email"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user_email = user.get_email()
        self.assertEqual(user_email, "ambika@vlabs.ac.in")
#+END_SRC

***** getPhone: User --> String
#+BEGIN_SRC python :tangle db.py :eval no
    def get_phone(self):
	current_app.logger.debug("get phone number of the User: %s" % self.phone)
        return self.phone
#+END_SRC

***** Test getPhone: User --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_phone(self):
        print "test_get_user_phone"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"),
                    role=role,
                    phone="5632564368")
        user.save()
        self.assertEqual(user.phone, "5632564368")
#+END_SRC

***** getInstituteName: User --> String
#+BEGIN_SRC python :tangle db.py :eval no
    def get_institute_name(self):
        current_app.logger.debug("get institute_name of the User: %s" % self.institute_name)
        return self.institute_name
#+END_SRC
      
***** Test getInstitueName: User --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_inst_name(self):
        print "test_get_user_inst_name"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"),
                    role=role,
                    institute_name="IIIT-H")
        user.save()
        self.assertEqual(user.institute_name, "IIIT-H")
#+END_SRC

***** getRole: User --> Role
#+BEGIN_SRC python :tangle db.py :eval no
    def get_role(self):
        current_app.logger.debug("get role of the User: %s" % self.role)
        return self.role
#+END_SRC

***** Test getRole: User --> Role
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_role(self):
        print "test_get_user_role"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user_role = user.get_role()
        self.assertEqual(user_role, role)
#+END_SRC

***** gettimeOfCreation: User --> Datetime
#+BEGIN_SRC python :tangle db.py :eval no
    def get_created(self):
        current_app.logger.debug("get time of creation of the User: %s" % self.created)
        return self.created
#+END_SRC

***** Test timeOfCreation: User --> Datetime
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_toc(self):
        print "test_get_user_toc"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role,\
                    created ="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
        user.save()
        self.assertEqual(user.created, "Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
#+END_SRC

***** getLastActive: User --> String
#+BEGIN_SRC python :tangle db.py :eval no
    def get_last_active(self):
        current_app.logger.debug("get last active time of the User: %s" % self.last_active)
        return self.last_active
#+END_SRC
      
***** Test getLastActive: User --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_user_last_act(self):
        print "test_get_user_last_act"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role,\
                    last_active="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
        user.save()
        self.assertEqual(user.last_active, "Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")

#+END_SRC

***** setName: User, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name.value
#+END_SRC

***** Test setName: User, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_name(self):
        print "test_set_user_name"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        user.save()
        user.set_name(Name("Madhavi"))
        user.save()
        user = User.get_by_id(1)
        self.assertEqual("Madhavi", user.name)
#+END_SRC

***** setEmail: User, Email --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(email=Email)
    def set_email(self, email):
        self.email = email.value
#+END_SRC

***** Test setEmail: User, Email --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_email(self):
        print "test_set_user_email"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        user.save()
        user.set_email(Email("madhavi@vlabs.ac.in"))
        user.save()
        user = User.get_by_id(1)
        self.assertEqual("madhavi@vlabs.ac.in", user.email)
#+END_SRC

***** setPhone: User, Phone --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_phone(self, phone):
	self.phone = phone
#+END_SRC

***** Test setPhone: User, Phone --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_phone(self):
        print "test_set_user_phone"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        user.save()
        user.set_phone("5632564368")
        user.save()
        self.assertEqual("5632564368", user.phone)
#+END_SRC

***** setInstituteName: User, InstituteName --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_institute_name(self, institute_name):
        self.institute_name = institute_name
#+END_SRC

***** Test setInstituteName: User, InstituteName --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_institute_name(self):
        print "test_set_user_institute_name"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        user.save()
        user.set_institute_name("IIIT-H")
        user.save()
        self.assertEqual("IIIT-H", user.institute_name)
#+END_SRC

***** setLastActive: User, Time --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_last_active(self, last_active):
        self.last_active = last_active
#+END_SRC

***** Test setLastActive: User, Time --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_last_active(self):
        print "test_set_user_last_active"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        user.save()
        user.set_last_active("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
        user.save()
        self.assertEqual("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)", user.last_active)
#+END_SRC

***** set timeOfCreation: User, Time --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_toc(self, created):
        self.created = created
#+END_SRC

***** Test settimeOfCreation: User, Time --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_toc(self):
        print "test_set_user_toc"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        user.save()
        user.set_toc("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
        user.save()
        self.assertEqual("Mon Nov 23 2015 06:18:26 GMT-0500 (EST)", user.created)
#+END_SRC

***** setRole: User, Role --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(role=Role)
    def set_role(self, role):
        self.role = role

#+END_SRC

***** Test setRole: User, Role --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_user_role(self):
        print "test_set_user_role"
        role1 = Role(name=Name("Admin"))
        role2 = Role(name=Name("OC"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role1)
        user.save()     
        user.set_role(role2)
        user.save()
        user = User.get_by_id(1)
        self.assertEqual(user.role, role2)
#+END_SRC

***** setUserStatus: User, UserStatus --> void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_user_status(self, user_status):
        self.user_status = user_status

#+END_SRC

***** getUserStatus: User --> UserStatus
#+BEGIN_SRC python :tangle db.py :eval no
    def get_user_status(self):
	current_app.logger.debug("get user status of the User: %s" % self.user_status)
        return self.user_status

#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'email': self.email,
            'phone': self.phone,
            'name': self.name,
            'role': self.role.to_client(),
            'last_active': self.last_active,
            'institute_name': self.institute_name,
            'created': self.created,
            'user_status': self.user_status
        }
#+END_SRC
      
***** Test User to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_user_to_client(self):
        print "test_user_to_client"
        role = Role(name=Name("Admin"))
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"), role = role)
        user.save()
        user = User.get_by_id(1)
        user_dict = user.to_client()
        self.assertEqual("madhavi@vlabs.ac.in", user_dict['email'])
        self.assertEqual("madhavi", user_dict['name'])
        self.assertEqual("Admin", user_dict['role']['name'])
#+END_SRC

*** Reference Document
**** Immutable data
     + Id
  
**** Mutable data
     + Name
     + Path
     + Created By 

**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class ReferenceDocument(Entity):

    __tablename__ = 'reference_documents'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    path = db.Column(db.String(128))
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE 
    reference_document = ReferenceDocument(name=str,
                                         path=str,
                                         user=<instance of class User>)
                                            
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'user' not in kwargs:
            raise AttributeRequired("mandatory attribute `user` is missing")
        self.set_user(kwargs['user'])
        
        if 'path' in kwargs:
            self.set_path(kwargs['path'])

    def __str__(self):
        return "Name = %s, user = %s, path = %s" % \
            (self.name, self.user.name, self.path)

    def __repr__(self):
        return "Name = %s, user = %s, path = %s" % \
            (self.name, self.user.name, self.path)

#+END_SRC

**** Tests for Reference Document Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestReferenceDocument(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_reference_document_constructor(self):
        print "test_reference_document_constructor"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        name = "Attandance Sheet"
        reference_document = ReferenceDocument(name=name, user=user)
        self.assertEqual(isinstance(reference_document, ReferenceDocument), True)

        # Calling the reference_document constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, ReferenceDocument)

        # Calling the reference_document constructor with necessary arguments
        # (name,path) but with wrong type should raise TypeError
        self.assertRaises(TypeError, ReferenceDocument,
                          ,**{'name': 'joe',
                             'user': 'smith'
                            })

#+END_SRC
**** Functions that operate on the Reference Document domain
***** getAll: Nil --> set[ReferenceDocument]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of Reference Document entity")

        return ReferenceDocument.query.all()

#+END_SRC

***** Test getAll: Nil --> set[ReferenceDocument]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_reference_documents_get_all(self):
        print "test_reference_documents_get_all"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        doc1 = ReferenceDocument(name="Attendance Sheet", user=user)
        doc1.save()

        doc2 = ReferenceDocument(name="College Report", user=user)
        doc2.save()

        doc_list = ReferenceDocument.get_all()
        self.assertEqual("Attendance Sheet", doc_list[0].name)
        self.assertEqual("College Report", doc_list[1].name)

#+END_SRC

***** getReferenceDocument: Id --> ReferenceDocument
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by ReferenceDocument id: %s"  % id)
        return ReferenceDocument.query.get(id)

#+END_SRC

***** Test getReferenceDocument: Id --> ReferenceDocument
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_reference_document_by_id(self):
        print "test_get_document_by_id"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        reference_document = ReferenceDocument(name="Attendance Sheet", user=user)
        reference_document.save()
        self.assertEqual(reference_document.get_by_id(1).name, "Attendance Sheet")

#+END_SRC
     
***** getName: ReferenceDocument --> Name
#+BEGIN_SRC python :tangle db.py :eval no
    def get_name(self):
        current_app.logger.debug("get name of the Reference Document: %s" % self.name)
        return self.name
#+END_SRC

***** Test getName: ReferenceDocument --> Name
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_reference_document_name(self):
        print "test_get_document_name"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        reference_document = ReferenceDocument(name="Attendance Sheet", user=user)
        reference_document_name = reference_document.get_name()
        self.assertEqual(reference_document_name, "Attendance Sheet")
#+END_SRC

***** getPath: ReferenceDocument --> String
#+BEGIN_SRC python :tangle db.py :eval no 
    def get_path(self):
        current_app.logger.debug("get path of the Reference Document: %s" % self.path)
        return self.path
#+END_SRC

***** Test getPath: ReferenceDocument --> String
#+BEGIN_SRC python
    def test_get_reference_document_path(self):
        print "test_get_document_path"
        name = Name("Admin")

        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        reference_document = ReferenceDocument(name="Attendance Sheet", user=user,\
                                             path="/reference-documents/admin")
        reference_document_path = reference_document.get_path()
        self.assertEqual(reference_document_path, "/reference-documents/admin")
#+END_SRC
     
***** getUser: ReferenceDocument --> User
#+BEGIN_SRC python :tangle db.py :eval no 
    def get_user(self):
        current_app.logger.debug("get user of the Reference Document: %s" % self.user)
        return self.user
#+END_SRC
***** TestUser: ReferenceDocument --> User
***** setName: ReferenceDocument, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_name(self, name):
        self.name = name
#+END_SRC

***** Test setName: ReferenceDocument, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_reference_document_name(self):
        print "test_set_document_name"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        reference_document = ReferenceDocument(name="Attandance Sheet", user=user)
        reference_document.set_name("College Report")
        self.assertEqual(reference_document.name, "College Report")
#+END_SRC

***** setPath: ReferenceDocument, String --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    def set_path(self, path):
        self.path = path
#+END_SRC

***** Test setPath: ReferenceDocument, String --> Void
#+BEGIN_SRC python
    def test_set_reference_document_path(self):
        print "test_set_document_path"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        reference_document = ReferenceDocument(name="Attandance Sheet", user=user,\
                                             path="/reference-documents/OC")
        reference_document.set_path("/reference-documents/OC")
        reference_document.save()
        doc = reference_document.get_by_id(1)
        self.assertEqual(doc.path, "/reference-documents/OC")
#+END_SRC
      
***** setUser: ReferenceDocument, User --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(user=User)
    def set_user(self, user):
        self.user = user

#+END_SRC
***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name,
            'path': self.path,
            'user': self.user.to_client()
        }
#+END_SRC
      
***** Test Reference Document to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_reference_document_to_client(self):
        print "test_reference_document_to_client"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        doc = ReferenceDocument(name="Feedback", user=user)
        doc.save()
        doc = ReferenceDocument.get_by_id(1)
        doc_dict = doc.to_client()
        self.assertEqual("Feedback", doc_dict['name'])

#+END_SRC

*** Status
**** Immutable data
     + Id

**** Mutable data
     + Status Name

**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class Status(Entity):

    __tablename__ = 'status'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)

    workshop = db.relationship('Workshop', backref='status')
        
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    status = Status(name=<instance of class Name>)
                    
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

#+END_SRC
**** Tests for Status Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestStatus(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_status_constructor(self):
        print "test_status_constructor"
        name = Name("Pending for Approval")
        status = Status(name=name)
        self.assertEqual(isinstance(status, Status), True)

        # Calling the institute constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, Status)

        # Calling the role constructor with necessary arguments
        # (name) but with wrong type should raise TypeError
        self.assertRaises(TypeError, Role,
                          ,**{'name': "Pending for Approval"
                            })

#+END_SRC
**** Functions that operate on the Role domain
***** getStatus: Id --> Status
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by Status id: %s"  % id)
        return Status.query.get(id)

#+END_SRC
***** Test getStatus: Id --> Status
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_status_by_id(self):
        print "test_get_status_by_id"
        status = Status(name=Name("Pending for Approval"))
        status.save()
        self.assertEqual(status.get_by_id(1).name, "Pending for Approval")

#+END_SRC
***** getAll: Nil --> set[Status]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of Status entity")

        return Status.query.all()
#+END_SRC
***** Test getAll: Nil --> set[Status]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_status_get_all(self):
        print "test_status_get_all"
        status1 = Status(name=Name("Upcoming"))
        status1.save()

        status2 = Status(name=Name("Pending"))
        status2.save()

        status_list = Status.get_all()
        self.assertEqual("Upcoming", status_list[0].name)
        self.assertEqual("Pending", status_list[1].name)

#+END_SRC
***** getName: Status --> Name
#+BEGIN_SRC python :tangle db.py :eval no
    def get_name(self):
        current_app.logger.debug("set the name of the status: %s" % self.name)
        return self.name
#+END_SRC
***** Test getName: Status --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_status_name(self):
        print "test_get_Status_name"
        status = Status(name=Name("Upcoming"))
        status_name = status.get_name()
        self.assertEqual(status_name, "Upcoming")
#+END_SRC

***** setName: Status, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(name=Name)
    def set_name(self, name):
        self.name = name.value
#+END_SRC
***** Test setName: Status, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_status_name(self):
        print "test_set_status_name"
        status = Status(name=Name("Pending for Approval"))
        new_name = Name("Approved")
        status.set_name(new_name)
        self.assertEqual(status.name, "Approved")
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name
        }

#+END_SRC

***** Test Status to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_status_to_client(self):
        print "test_status_to_client"
        status = Status(name=Name("Rejected"))
        status.save()
        status = Status.get_by_id(1)
        status_dict = status.to_client()
        self.assertEqual("Rejected", status_dict['name'])
#+END_SRC
*** Institute Analytics
**** Immutable data
     + Id

**** Mutable data
     + Institute Name
     + Total Workshops
     + Total Usage
     + Total Participants Attended

**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class InstituteAnalytics(Entity):

    __tablename__ = 'institute_analytics'

    id = db.Column(db.Integer, primary_key=True)
    institute_name = db.Column(db.String(128), nullable=False, unique=True)
    user_id = db.Column(db.Integer)
    total_workshops = db.Column(db.Integer)
    total_usage = db.Column(db.Integer)
    total_participants_attended = db.Column(db.Integer)
        
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    status = Status(name=<instance of class Name>)
                    
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'institute_name' not in kwargs:
            raise AttributeRequired("mandatory attribute `institute_name` is missing")
        self.set_institute_name(kwargs['institute_name'])

#+END_SRC

**** Functions that operate on the Analytics domain
***** getStatus: Id --> Analytics
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by Institute Analytics id: %s"  % id)
        return InstituteAnalytics.query.get(id)

#+END_SRC

***** getAll: Nil --> set[Status]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of Institute Analytics entity")

        return InstituteAnalytics.query.all()
#+END_SRC

***** setName: Status, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(institute_name=str)
    def set_institute_name(self, institute_name):
        self.institute_name = institute_name.value
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'institute_name': self.institute_name,
            'total_workshops': self.total_workshops,
            'total_usage': self.total_usage,
            'total_participants_attended': self.total_participants_attended,
            'user_id': self.user_id
        }

#+END_SRC

*** Nodal Centre Analytics
**** Immutable data
     + Id

**** Mutable data
     + Institute Name
     + Total Nodal Centre
**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class NodalCentreAnalytics(Entity):

    __tablename__ = 'nc_analytics'

    id = db.Column(db.Integer, primary_key=True)
    institute_name = db.Column(db.String(128), nullable=False, unique=True)
    user_id = db.Column(db.Integer)
    total_nodal_centres = db.Column(db.Integer)
        
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    status = Status(name=<instance of class Name>)
                    
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'institute_name' not in kwargs:
            raise AttributeRequired("mandatory attribute `institute_name` is missing")
        self.set_institute_name(kwargs['institute_name'])

#+END_SRC

**** Functions that operate on the Analytics domain
***** getStatus: Id --> Analytics
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by NodalCentreAnalytics Analytics id: %s"  % id)
        return NodalCentreAnalytics.query.get(id)

#+END_SRC

***** getAll: Nil --> set[Status]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of NodalCentreAnalytics Analytics entity")

        return NodalCentreAnalytics.query.all()
#+END_SRC

***** setName: Status, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(institute_name=str)
    def set_institute_name(self, institute_name):
        self.institute_name = institute_name.value
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'institute_name': self.institute_name,
            'user_id': self.user_id,
            'total_nodal_centres': self.total_nodal_centres
        }

#+END_SRC

*** Analytics
**** Immutable data
     + Id

**** Mutable data
     + Name
     + Total Value
**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class Analytics(Entity):

    __tablename__ = 'analytics'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False, unique=True)
    total_value = db.Column(db.Integer)
        
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    status = Status(name=<instance of class Name>)
                    
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

#+END_SRC

**** Functions that operate on the Analytics domain
***** getStatus: Id --> Analytics
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by Analytics id: %s"  % id)
        return Analytics.query.get(id)

#+END_SRC

***** getAll: Nil --> set[Status]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of Analytics entity")

        return Analytics.query.all()
#+END_SRC

***** setName: Status, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(name=str)
    def set_name(self, name):
        self.name = name.value
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name,
            'total_value': self.total_value
        }

#+END_SRC

*** Workshop
**** Immutable data
     + Id
     + Created
       
**** Mutable data
     + Name
     + Location
     + Last Updated
     + User --> Id
     + Participating Institutes 
     + Date
     + No Of Participants Expected
     + Participants Attended
     + No Of Sessions
     + Duration Of Sessions
     + Discipline(s)
     + Labs Planned
     + Experiments Conducted
     + Other Details
     + Status
     + Cancellation Reason
     + Not Approval Reason
       
**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class Workshop(Entity):

    __tablename__ = 'workshops'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    location = db.Column(db.String(128))

    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    status_id = db.Column(db.Integer, db.ForeignKey('status.id'))

    workshop_status = db.Column(db.String(128))
    date = db.Column(db.String(128), nullable=False)
    created = db.Column(db.DateTime(), default=datetime.utcnow)
    last_updated = db.Column(db.String(128))
    participating_institutes = db.Column(db.String(128))
    no_of_participants_expected = db.Column(db.Integer)
    participants_attended = db.Column(db.Integer)
    no_of_sessions = db.Column(db.Integer)
    duration_of_sessions = db.Column(db.String(128))
    labs_planned = db.Column(db.Integer)
    disciplines = db.Column(db.String(128))
    experiments_conducted = db.Column(db.Integer)
    other_details = db.Column(db.String(128))
    cancellation_reason = db.Column(db.String(128))
    not_approval_reason = db.Column(db.String(128))
    gateway_ip = db.Column(db.String(128))
    version = db.Column(db.String(60))
    workshop_reports = db.relationship('WorkshopReport', backref='workshop')
#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
  Workshop = Workshop(name=str,
                      location=str,
                      user=<instance of class User>,
                      participating_institutes=str,
                      date=str,
                      no_of_participants_expected=int
                      [,participants_attended=int],
                      no_of_sessions=int
                      [,duration_of_sessions=str]
                      [,disciplines=str],
                      labs_planned=int
                      [,experiments_conducted=int]
                      [,other_details=str],
                      status=<instance of class Status>
                      [,cancellation_reason=str]
                      [,not_approval_reason=str]
                      [,last_updated=str])                                                                           
                                          
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'location' not in kwargs:
            raise AttributeRequired("mandatory attribute `location` is missing")
        self.set_location(kwargs['location'])

        if 'user' not in kwargs:
            raise AttributeRequired("mandatory attribute `user` is missing")
        self.set_user(kwargs['user'])

        if 'participating_institutes' not in kwargs:
            raise AttributeRequired("mandatory attribute `participating_institutes` is missing")
        self.set_participating_institutes(kwargs['participating_institutes'])

        if 'no_of_participants_expected' not in kwargs:
            raise AttributeRequired("mandatory attribute `no_of_participants_\
            expected` is missing")
        self.set_no_of_participants_expected(kwargs['no_of_participants_expected'])

        if 'no_of_sessions' not in kwargs:
            raise AttributeRequired("mandatory attribute `no_of_sessions` is\
            missing")
        self.set_no_of_sessions(kwargs['no_of_sessions'])

        if 'labs_planned' not in kwargs:
            raise AttributeRequired("mandatory attribute `labs_planned` is\
            missing")
        self.set_labs_planned(kwargs['labs_planned'])

        if 'status' not in kwargs:
            raise AttributeRequired("mandatory attribute `status` is missing")
        self.set_status(kwargs['status'])

        if 'date' not in kwargs:
            raise AttributeRequired("mandatory attribute `date` is missing")
        self.set_date(kwargs['date'])

        if 'version' not in kwargs:
            raise AttributeRequired("mandatory attribute `version` is\
            missing")
        self.set_version(kwargs['version'])

        if 'participants_attended' in kwargs:
            self.set_participants_attended(kwargs['participants_attended'])

        if 'duration_of_sessions' in kwargs:
            self.set_duration_of_sessions(kwargs['duration_of_sessions'])

        if 'experiments_conducted' in kwargs:
            self.set_experiments_conducted(kwargs['experiments_conducted'])

        if 'disciplines' in kwargs:
            self.set_disciplines(kwargs['disciplines'])

        if 'other_details' in kwargs:
            self.set_other_details(kwargs['other_details'])

        if 'cancellation_reason' in kwargs:
            self.set_cancellation_reason(kwargs['cancellation_reason'])

        if 'not_approval_reason' in kwargs:
            self.set_not_approval_reason(kwargs['not_approval_reason'])

        if 'gateway_ip' in kwargs:
            self.set_gateway_ip(kwargs['gateway_ip'])

        if 'last_updated' in kwargs:
            self.set_last_updated(kwargs['last_updated'])

        if 'workshop_status' in kwargs:
            self.set_workshop_status(kwargs['workshop_status'])                

        
    def __str__(self):
        return "Name = %s, location = %s, user = %s, participating_institutes = %s,\
        no_of_participants_expected = %s, no_of_sessions = %s, labs_planned = %s,\
        status = %s, date = %s, participants_attended = %s, duration_of_sessions = %s,\
        experiments_conducted = %s, disciplines = %s, other_details = %s,\
        cancellation_reason = %s, not_approval_reason = %s, last_updated = %s"\
            % (self.name, self.location, self.user.name,\
               self.participating_institutes, self.no_of_participants_expected,\
               self.no_of_sessions, self.labs_planned, self.status, self.date,\
               self.participants_attended, self.duration_of_sessions,\
               self.experiments_conducted, self.disciplines,\
               self.other_details, self.cancellation_reason,\
               self.not_approval_reason, self.last_updated)

    
    def __repr__(self):
        return "Name = %s, location = %s, user = %s, participating_institutes = %s,\
        no_of_participants_expected = %s, no_of_sessions = %s, labs_planned = %s,\
        status = %s, date = %s, participants_attended = %s, duration_of_sessions = %s,\
        experiments_conducted = %s, disciplines = %s, other_details = %s,\
        cancellation_reason = %s, not_approval_reason = %s, last_updated = %s"\
            % (self.name, self.location, self.user.name,\
               self.participating_institutes, self.no_of_participants_expected,\
               self.no_of_sessions, self.labs_planned, self.status, self.date,\
               self.participants_attended, self.duration_of_sessions,\
               self.experiments_conducted, self.disciplines,\
               self.other_details, self.cancellation_reason,\
               self.not_approval_reason, self.last_updated)

#+END_SRC
     
**** Tests for Workshop Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestWorkshop(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_workshop_constructor(self):
        print "test_workshop_constructor"
        role = Role(name=Name("Admin"))
        role.save()
    
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"),
                    role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")

        self.assertEqual("Coordinators Training", workshop.name)
        self.assertEqual(status, workshop.status)
        self.assertEqual(user, workshop.user)                        
    
        # Calling the workshop constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, Workshop)

        # Calling the workshop constructor with necessary arguments
        # but with wrong type should raise TypeError
        self.assertRaises(TypeError, Workshop,
                          ,**{'name': "Coordinators Training",
                             'location': "IIIT-Hyd",
                             'user': user,
                             'participating_institutes': "HCU, IIIT-Hyd",
                             'no_of_participants_expected': 100,
                             'no_of_sessions': "three",
                             'labs_planned': 4,
                             'status': status,
                             'date': "Mon Nov 23 2015 06:18:26 GMT-0500 (EST)"
                         })

#+END_SRC
**** Functions that operate on the Workshop Document domain
***** getAll: Nil --> set[Workshop]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of Workshop entity")
        return Workshop.query.all()

#+END_SRC
***** Test getAll: Nil --> set[Workshop]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_workshop_get_all(self):
        print "test_workshop_get_all"
        role = Role(name=Name("Admin"))
        user = User(name=Name("Thirumal Ravula"),
                    email=Email("travula@gmail.com"), role=role)
        
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")
        
        workshop_1.save() 
        
        workshop_2 = Workshop(name="HCU workshop", location="HCU",
                              user=user, participating_institutes="HCU,\
                              IIIT-Hyd", no_of_participants_expected=50,
                              no_of_sessions=2, labs_planned=2,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_2.save()
                          
        workshop_list = Workshop.get_all()
        
        self.assertEqual(4, workshop_list[0].labs_planned)
        self.assertEqual("Coordinators Training", workshop_list[0].name)
        self.assertEqual("Thirumal Ravula", workshop_list[0].user.name)
        self.assertEqual(2, workshop_list[1].labs_planned)
        self.assertEqual("HCU workshop", workshop_list[1].name)
        self.assertEqual("Thirumal Ravula", workshop_list[1].user.name)
#+END_SRC
***** getWorkshop: Id --> Workshop
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by Status id: %s"  % id)
        return Workshop.query.get(id)

#+END_SRC
***** Test getWorkshop: Id --> Workshop
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_by_id(self):
        print "test_get_workshop_by_id"
        role = Role(name=Name("Admin"))
        role.save()

        status = Status(name=Name("Upcoming"))
        status.save()        

        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"),\
                    role=role)
        
        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")
        
        self.assertEqual(workshop_1.get_by_id(1).name, "Coordinators Training")
#+END_SRC

***** getName: Workshop --> Name
#+BEGIN_SRC python :tangle db.py :eval no
    def get_name(self):
        current_app.logger.debug("get the name of the Workshop: %s" % self.name)
        return self.name
#+END_SRC

***** Test getName: Workshop --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_name(self):
        print "test_get_workshop_name"
        role = Role(name=Name("Admin"))

        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)

        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_name = workshop_1.get_name()
        self.assertEqual(workshop_name, "Coordinators Training")
#+END_SRC

***** getLocation: Workshop --> Location
#+BEGIN_SRC python :tangle db.py :eval no
    def get_location(self):
        current_app.logger.debug("get the name of the Workshop: %s" % self.name)
        return self.location
#+END_SRC

***** Test getLocation: Workshop --> Location
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_location(self):
        print "test_get_workshop_location"
        role = Role(name=Name("Admin"))

        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
 
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")


        workshop_location = workshop_1.get_location()
        self.assertEqual(workshop_location, "IIIT-Hyd")
#+END_SRC

***** getDate: Workshop --> String
#+BEGIN_SRC python :tangle db.py :eval no
    def get_date(self):
        current_app.logger.debug("get the date of the Workshop: %s" % self.date)
        return self.date
#+END_SRC
***** Test getDate: Workshop --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_date(self):
        print "test_get_workshop_date"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status,
                              date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")


        workshop_date = workshop_1.get_date()
        self.assertEqual(workshop_date, "Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
#+END_SRC

***** getUser: Workshop --> User
#+BEGIN_SRC python :tangle db.py :eval no
    def get_user(self):
        current_app.logger.debug("get the user of the Workshop: %s" % self.user)
        return self.user

#+END_SRC

***** Test getUser: Workshop --> User
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_user(self):
        print "test_get_workshop_user"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_user = workshop_1.get_user()
        self.assertEqual("ambika", workshop_user.name )
#+END_SRC

***** timeOfCreation: Workshop --> Datetime
#+BEGIN_SRC python :tangle db.py :eval no
    def get_created(self):
        current_app.logger.debug("get the time of creation of the Workshop: %s" % self.created)
        return self.created
#+END_SRC

***** Test timeOfCreation: Workshop --> Datetime
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_toc(self):
        print "test_get_workshop_toc"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        time = datetime.utcnow()
        year = time.year
        month = time.month    
        day = time.day
        minute = time.minute
        
        workshop_toc = workshop.get_created()
        workshop_year = workshop_toc.year
        workshop_month = workshop_toc.month
        workshop_day = workshop_toc.day
        workshop_min = workshop_toc.minute
        
        self.assertEqual(workshop_year, year)
        self.assertEqual(workshop_month, month)
        self.assertEqual(workshop_day, day)
        self.assertEqual(workshop_min, minute)
#+END_SRC

***** getLastUpdated: Workshop --> String
#+BEGIN_SRC python :tangle db.py :eval no
    def get_last_updated(self):
        current_app.logger.debug("get the last updated time of the Workshop: %s" % self.last_updated)
        return self.last_updated
#+END_SRC
      
***** Test getLastUpdated: Workshop --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_last_upd(self):
        print "test_get_workshop_last_upd"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)", last_updated="Tue Nov 24 2015")

        workshop.save()

        self.assertEqual(workshop.get_last_updated(), "Tue Nov 24 2015")

#+END_SRC

***** getParticipatingInstitutes: Workshop --> ParticipatingInstitutes
#+BEGIN_SRC python :tangle db.py :eval no
    def get_participating_institutes(self):
        current_app.logger.debug("get the participating_institutes of the Workshop: %s" % self.participating_institutes)
        return self.participating_institutes
#+END_SRC
***** Test getParticipatingInstitutes: Workshop --> ParticipatingInstitutes
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_participating_institutes(self):
        print "test_get_workshop_participating_institutes"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")


        participants = workshop_1.get_participating_institutes()
        self.assertEqual(participants, "HCU, IIIT-Hyd")
#+END_SRC
***** getNoOfParticipantsExpected: Workshop --> ParticipantsExpected
#+BEGIN_SRC python :tangle db.py :eval no
    def get_no_of_participants_expected(self):
        current_app.logger.debug("get the no_of_participants_expected of the Workshop: %s" % self.no_of_participants_expected)
        return self.no_of_participants_expected
#+END_SRC
***** Test getNoOfParticipantsExpected: Workshop --> ParticipantsExpected
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_participants_expected(self):
        print "test_get_workshop_participants_expected"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")


        participants_exp = workshop_1.get_no_of_participants_expected()
        self.assertEqual(participants_exp, 100)
#+END_SRC
***** getNoOfParticipantsAttended: Workshop --> NoOfParticipantsAttended
#+BEGIN_SRC python :tangle db.py :eval no
    def get_no_of_participants_attended(self):
        current_app.logger.debug("get the participants_attended for the Workshop: %s" % self.participants_attended)
        return self.participants_attended
#+END_SRC
***** Test getNoOfParticipantsAttended: Workshop --> NoOfParticipantsAttended
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_actual_participants_attended(self):
        print "test_get_workshop_actual_participants_attended"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, participants_attended=120,
                              date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")


        participants_att = workshop_1.get_no_of_participants_attended()
        self.assertEqual(participants_att, 120)
#+END_SRC
***** getOtherDetails: Workshop --> OtherDetails
#+BEGIN_SRC python :tangle db.py :eval no
    def get_other_details(self):
        current_app.logger.debug("get the participants_attended for the Workshop: %s" % self.participants_attended)
        return self.other_details
#+END_SRC
***** Test getOtherDetails: Workshop --> OtherDetails
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_other_details(self):
        print "test_get_workshop_other_details"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, other_details="Overwhelming response!",
                              date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")


        details = workshop_1.get_other_details()
        self.assertEqual(details, "Overwhelming response!")
#+END_SRC
***** getNoOfExptsConducted: Workshop --> NoOfExptsConducted
#+BEGIN_SRC python :tangle db.py :eval no
    def get_no_of_expts_conducted(self):
        current_app.logger.debug("get the number of experiments conducted for the Workshop: %s" % self.experiments_conducted)
        return self.experiments_conducted
#+END_SRC
***** Test getNoOfExptsConducted: Workshop --> NoOfExptsConducted
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_no_of_expts_conducted(self):
        print "test_get_workshop_no_of_expts_conducted"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, experiments_conducted=20,
                              date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")

        
        expts_conducted = workshop_1.get_no_of_expts_conducted()
        self.assertEqual(expts_conducted, 20)
#+END_SRC
***** getDurationOfSessions: Workshop --> DurationOfSessions
#+BEGIN_SRC python :tangle db.py :eval no
    def get_duration_of_sessions(self):
        current_app.logger.debug("get the duration_of_sessions for the Workshop: %s" % self.duration_of_sessions)
        return self.duration_of_sessions
#+END_SRC
***** Test getDurationOfSessions: Workshop --> DurationOfSessions
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_duration_of_sessions(self):
        print "test_get_workshop_duration_of_sessions"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, duration_of_sessions="10:30",
                              date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")


        duration = workshop_1.get_duration_of_sessions()
        self.assertEqual(duration, "10:30")
#+END_SRC
***** getDisciplines: Workshop --> Disciplines
#+BEGIN_SRC python :tangle db.py :eval no
    def get_disciplines(self):
        current_app.logger.debug("get the disciplines for the Workshop: %s" % self.disciplines)
        return self.disciplines
#+END_SRC
***** Test getDisciplines: Workshop --> Disciplines
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_disciplines(self):
        print "test_get_workshop_disciplines"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, disciplines="Electronics & Communication",
                              date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")


        disc = workshop_1.get_disciplines()
        self.assertEqual(disc, "Electronics & Communication")
#+END_SRC
***** getNoOfSessions: Workshop --> NoOfSessions
#+BEGIN_SRC python :tangle db.py :eval no
    def get_no_of_sessions(self):
        current_app.logger.debug("get the no_of_sessions for the Workshop: %s" % self.no_of_sessions)
        return self.no_of_sessions
#+END_SRC
***** Test getNoOfSessions: Workshop --> NoOfSessions
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_no_of_sessions(self):
        print "test_get_workshop_no_of_sessions"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")
        workshop_1.save()
      
        self.assertEqual(3, workshop_1.get_no_of_sessions())
#+END_SRC
***** getPlannedLabs: Workshop --> PlannedLabs
#+BEGIN_SRC python :tangle db.py :eval no
    def get_planned_labs(self):
        current_app.logger.debug("get the labs_planned for the Workshop: %s" % self.labs_planned)
        return self.labs_planned
#+END_SRC
***** Test getPlannedLabs: Workshop --> PlannedLabs
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_planned_labs(self):
        print "test_get_workshop_planned_labs"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")


        wkshp_labs_plan = workshop_1.get_planned_labs()
        self.assertEqual(wkshp_labs_plan, 4)
#+END_SRC
***** getStatus: Workshop --> Status
#+BEGIN_SRC python :tangle db.py :eval no
    def get_status(self):
        current_app.logger.debug("get the status of the Workshop: %s" % self.status)
        return self.status
#+END_SRC
***** Test getStatus: Workshop --> Status
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_status(self):
        print "test_get_workshop_status"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")


        wkshp_status = workshop_1.get_status()
        self.assertEqual(wkshp_status.name, "Upcoming")
#+END_SRC
***** getCancellationReason: Workshop --> Reason
#+BEGIN_SRC python :tangle db.py :eval no
    def get_cancellation_reason(self):
        current_app.logger.debug("get the cancellation_reason for the Workshop: %s" % self.cancellation_reason)
        return self.cancellation_reason
#+END_SRC
***** Test getCancellationReason: Workshop --> Reason
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_cancellation_reason(self):
        print "test_get_workshop_cancellation_reason"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, cancellation_reason="Univ Exams",
                              date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")


        reason = workshop_1.get_cancellation_reason()
        self.assertEqual(reason, "Univ Exams")
#+END_SRC
***** getNotApprovalReason: Workshop --> Reason
#+BEGIN_SRC python :tangle db.py :eval no
    def get_not_approval_reason(self):
        current_app.logger.debug("get the not_approval_reason for the Workshop: %s" % self.not_approval_reason)
        return self.not_approval_reason
#+END_SRC
***** getGatwayIP: Workshop --> Reason
#+BEGIN_SRC python :tangle db.py :eval no
    def get_gateway_ip(self):
        current_app.logger.debug("get the gateway_ip: %s" % self.gateway_ip)
        return self.gateway_ip
#+END_SRC
***** getConductedOn: Workshop --> version
#+BEGIN_SRC python :tangle db.py :eval no
    def get_version(self):
        current_app.logger.debug("get version: %s" % self.version)
        return self.version
#+END_SRC

***** Test getNotApprovalReason: Workshop --> Reason
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_not_approval_reason(self):
        print "test_get_workshop_not_approval_reason"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, not_approval_reason="College Report not uploaded",
                              date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")


        reason = workshop_1.get_not_approval_reason()
        self.assertEqual(reason, "College Report not uploaded")
#+END_SRC

***** setName: Workshop, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(name=str)
    def set_name(self, name):
        self.name = name
#+END_SRC
      
***** Test setName: Workshop, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_workshop_name(self):
        print "test_set_workshop_name"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")

        workshop.save()
        workshop.set_name("Coordinators Training")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("Coordinators Training", workshop.name)
#+END_SRC

***** setLocation: Workshop, Location --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(location=str)
    def set_location(self, location):
        self.location = location
#+END_SRC

***** Test setLocation: Workshop, Location --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_workshop_location(self):
        print "test_set_workshop_location"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_location("HCU")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("HCU", workshop.location)
#+END_SRC

***** setUser: Workshop, User --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(user=User)
    def set_user(self, user):
        self.user = user
#+END_SRC
***** Test setUser: Workshop, User --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_workshop_user(self):
        print "test_set_workshop_user"
        role = Role(name=Name("Admin"))

        user1 = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user2 = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"), role=role)

        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user1, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")


        workshop.save()     
        workshop.set_user(user2)
        workshop.save()
        self.assertEqual(workshop.user, user2)
#+END_SRC
***** setDate: Workshop, String --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(date=str)
    def set_date(self, date):
        self.date = date
#+END_SRC
***** Test setDate: Workshop, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_workshop_date(self):
        print "test_set_workshop_date"
        role = Role(name=Name("Admin"))

        user1 = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user2 = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"), role=role)

        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user1, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")


        workshop.save()     
        workshop.set_date("Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")
        workshop.save()
        date = workshop.get_date()
        self.assertEqual(date, "Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")
#+END_SRC

***** setParticipatingInstitutes: Workshop, Institutes --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(participating_institutes=str)
    def set_participating_institutes(self, participating_institutes):
        self.participating_institutes = participating_institutes
#+END_SRC
***** Test setParticipatingInstitutes: Workshop, Institutes --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_participating_institutes(self):
        print "test_set_participating_institutes"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_participating_institutes("Osmania Uni")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("Osmania Uni", workshop.participating_institutes)
#+END_SRC
***** setNoOfParticipantsExpected: Workshop, NoOfParticipants --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(no_of_participants_expected=int)
    def set_no_of_participants_expected(self, no_of_participants_expected):
        self.no_of_participants_expected = no_of_participants_expected
#+END_SRC
***** Test setNoOfParticipantsExpected: Workshop, NoOfParticipants --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_no_of_participants_expected(self):
        print "test_set_no_of_participants_expected"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_no_of_participants_expected(120)
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual(120, workshop.no_of_participants_expected)
#+END_SRC
***** setParticipantsAttended: Workshop, ParticipantsAttended --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(participants_attended=int)
    def set_participants_attended(self, participants_attended):
        self.participants_attended = participants_attended
#+END_SRC
***** Test setParticipantsAttended: Workshop, ParticipantsAttended --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_participants_attended(self):
        print "test_set_participants_attended"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_participants_attended(100)
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual(100, workshop.participants_attended)
#+END_SRC
***** setNoOfSessions: Workshop, NoOfSessions --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(no_of_sessions=int)
    def set_no_of_sessions(self, no_of_sessions):
        self.no_of_sessions = no_of_sessions
#+END_SRC
***** Test setNoOfSessions: Workshop, NoOfSessions --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_no_of_sessions(self):
        print "test_set_no_of_sessions"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_no_of_sessions(2)
        workshop.save()
        no = workshop.get_no_of_sessions()       
        self.assertEqual(2, no)
#+END_SRC
***** setDurationOfSessions: Workshop, DurationOfSessions --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(duration_of_sessions=str)
    def set_duration_of_sessions(self, duration_of_sessions):
        self.duration_of_sessions = duration_of_sessions
#+END_SRC
***** Test setDurationOfSessions: Workshop, DurationOfSessions --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_duration_of_sessions(self):
        print "test_set_duration_of_sessions"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_duration_of_sessions("2.5")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("2.5", workshop.duration_of_sessions)
#+END_SRC

***** setDisciplines: Workshop, Disciplines --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(disciplines=str)
    def set_disciplines(self, disciplines):
        self.disciplines = disciplines
#+END_SRC
***** Test setDisciplines: Workshop, Disciplines --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_disciplines(self):
        print "test_set_disciplines"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_disciplines("Electronics & Communication")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("Electronics & Communication", workshop.disciplines)
#+END_SRC
***** setLastUpdated: Workshop, String --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(last_updated=str)
    def set_last_updated(self, last_updated):
        self.last_updated = last_updated
#+END_SRC

***** Test setLastUpdated: Workshop, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_last_updated(self):
        print "test_set_last_updated"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_last_updated("Tue Nov 24 2015")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("Tue Nov 24 2015", workshop.last_updated)
#+END_SRC

***** setLabsPlanned: Workshop, LabsPlanned --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(labs_planned=int)
    def set_labs_planned(self, labs_planned):
        self.labs_planned = labs_planned
#+END_SRC
***** Test setLabsPlanned: Workshop, LabsPlanned --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_labs_planned(self):
        print "test_set_planned_labs"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_labs_planned(5)
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual(5, workshop.labs_planned)
#+END_SRC
***** setExperimentsConducted: Workshop, ExperimentsConducted --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(experiments_conducted=int)
    def set_experiments_conducted(self, experiments_conducted):
        self.experiments_conducted = experiments_conducted
#+END_SRC
***** Test setExperimentsConducted: Workshop, ExperimentsConducted --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_experiments_conducted(self):
        print "test_set_experiments_conducted"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_experiments_conducted(20)
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual(20, workshop.experiments_conducted)
#+END_SRC
***** setOtherDetails: Workshop, OtherDetails --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(other_details=str)
    def set_other_details(self, other_details):
        self.other_details = other_details
#+END_SRC
***** Test setOtherDetails: Workshop, OtherDetails --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_other_details(self):
        print "test_set_other_details"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_other_details("Overwhelming Response!")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("Overwhelming Response!", workshop.other_details)
#+END_SRC
***** setStatus: Workshop, Status --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(status=Status)
    def set_status(self, status):
        self.status = status
#+END_SRC
***** Test setStatus: Workshop, Status --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_workshop_status(self):
        print "test_set_workshop_status"
        role = Role(name=Name("Admin"))

        user1 = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user2 = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"), role=role)

        status1 = Status(name=Name("Upcoming"))
        status1.save()        

        status2 = Status(name=Name("Pending for Approval"))
        status2.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user1, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status1, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")


        workshop.save()     
        workshop.set_status(status2)
        workshop.save()
        self.assertEqual(workshop.status, status2)
#+END_SRC
***** setCancellationReason: Workshop, Reason --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(cancellation_reason=str)
    def set_cancellation_reason(self, cancellation_reason):
        self.cancellation_reason = cancellation_reason
#+END_SRC
***** Test setCancellationReason: Workshop, Reason --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_cancellation_reason(self):
        print "test_set_cancellation_reason"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_cancellation_reason("Univ Exams")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("Univ Exams", workshop.cancellation_reason)
#+END_SRC
***** setNotApprovalReason: Workshop, Reason --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(not_approval_reason=str)
    def set_not_approval_reason(self, not_approval_reason):
        self.not_approval_reason = not_approval_reason

    @typecheck(gateway_ip=str)
    def set_gateway_ip(self, gateway_ip):
        self.gateway_ip = gateway_ip
#+END_SRC
***** setConductedOn: Workshop, version --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(version=str)
    def set_version(self, version):
        self.version = version

#+END_SRC

***** Test setNotApprovalReason: Workshop, Reason --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_not_approval_reason(self):
        print "test_set_not_approval_reason"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)     
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        
        workshop.save()
        workshop.set_not_approval_reason("Attendance Sheet missing")
        workshop.save()
        workshop = Workshop.get_by_id(1)
        self.assertEqual("Attendance Sheet missing", workshop.not_approval_reason)
#+END_SRC
***** setWorkshopStatus: Workshop, WorkshopStatus --> void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_workshop_status(self, workshop_status):
	current_app.logger.debug("set workshop status of the User: %s" % self.workshop_status)
        self.workshop_status = workshop_status

#+END_SRC

***** getWorkshopStatus: Workshop --> WorkshopStatus
#+BEGIN_SRC python :tangle db.py :eval no
    def get_workshop_status(self):
	current_app.logger.debug("get workshop status of the User: %s" % self.workshop_status)
        return self.workshop_status

#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'location': self.location,
            'name': self.name,
            'user': self.user.to_client(),
            'last_updated': self.last_updated,
            'created': self.created.isoformat(),
            'date': self.date,
            'participating_institutes': self.participating_institutes,
            'no_of_participants_expected': self.no_of_participants_expected,
            'participants_attended': self.participants_attended,
            'no_of_sessions': self.no_of_sessions,
            'duration_of_sessions': self.duration_of_sessions,
            'labs_planned': self.labs_planned,
            'disciplines': self.disciplines,
            'experiments_conducted': self.experiments_conducted,
            'other_details': self.other_details,
            'status': self.status.to_client(),
            'cancellation_reason': self.cancellation_reason,
            'not_approval_reason': self.not_approval_reason,
            'gateway_ip': self.gateway_ip,
            'version': self.version,
            'workshop_status': self.workshop_status
        }
#+END_SRC
      
***** Test Workshop to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_Workshop_to_client(self):
        print "test_workshop_to_client"
        role = Role(name=Name("Admin"))
        user = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"), role = role)
        user.save()
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop = Workshop(name="Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")

        workshop.save()
        workshop_dict = workshop.to_client()
        self.assertEqual("Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)", workshop_dict['date'])
        self.assertEqual("Training", workshop_dict['name'])

#+END_SRC
      
*** Nodal Centres
**** Immutable data
     + Id

**** Mutable data
     + Name
     + Location
     + NodalCoordinatorDetail --> Id
     + User --> Id

**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class NodalCentre(Entity):

    __tablename__ = 'nodal_centres'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    location = db.Column(db.String(128))
    pincode = db.Column(db.String(128))
    longitude = db.Column(db.String(128))
    lattitude = db.Column(db.String(128))
    centre_status = db.Column(db.String(128))
    created_by_id = db.Column(db.Integer, db.ForeignKey('users.id'))

    created_by = relationship('User', foreign_keys=[created_by_id])

 #+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    nodal_centre = NodalCentre(name=str,
                               location=str,                  
                               created_by=<instance of class User>)
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

        if 'location' not in kwargs:
            raise AttributeRequired("mandatory attribute `location` is missing")
        self.set_location(kwargs['location'])

        if 'created_by' not in kwargs:
            raise AttributeRequired("mandatory attribute `created_by` is missing")
        self.set_created_by(kwargs['created_by'])

        if 'centre_status' in kwargs:
            self.set_centre_status(kwargs['centre_status'])
        
        if 'longitude' in kwargs:
            self.set_longitude(kwargs['longitude'])
            
        if 'lattitude' in kwargs:
            self.set_lattitude(kwargs['lattitude'])

        if 'pincode' in kwargs:
            self.set_pincode(kwargs['pincode'])

                
    def __str__(self):
        return "Name = %s, location = %s, created_by = %s" % \
            (self.name, self.location, self.created_by)

    def __repr__(self):
        return "Name = %s, location = %s, created_by = %s" % \
            (self.name, self.location, self.created_by)

#+END_SRC

**** Tests for Nodal Centre Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestNodalCentre(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_nodal_centre_constructor(self):
        print "test_nodal_centre_constructor"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        self.assertEqual(user_1.name, nodal_centre1.created_by.name)
        self.assertEqual("IIIT-Hyd", nodal_centre1.name)
        self.assertEqual("Gachibowli", nodal_centre1.location)                        
    
        # Calling the nodal_centre constructor without any arguments should raise
        # AttributeRequired exception
        self.assertRaises(AttributeRequired, NodalCentre)

        # Calling the nodal_centre constructor with necessary arguments but with
        # wrong type should raise TypeError
        self.assertRaises(TypeError, NodalCentre,
                          ,**{'name': "IIIT-Hyd",
                              'location': 123,
                              'created_by': user_1,
                         })

#+END_SRC

**** Functions that operate on the Nodal Centre domain
***** getAll: Nil --> set[NodalCentre]
#+BEGIN_SRC python :tangle db.py :eval no 
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of Nodal Centre entity")
        return NodalCentre.query.all()
#+END_SRC
***** Test getAll: Nil --> set[NodalCentre]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_nodal_centres_get_all(self):
        print "test_nodal_centres_get_all"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)
        nodal_centre2.save()
        
        nodal_centres_list = NodalCentre.get_all()

        self.assertEqual("IIIT-Hyd", nodal_centres_list[0].name)
        self.assertEqual("HCU", nodal_centres_list[1].name)

        self.assertEqual("Gachibowli", nodal_centres_list[0].location)
        self.assertEqual("Lingampalli", nodal_centres_list[1].location)

#+END_SRC
***** getNodalCentre: Id --> NodalCentre
#+BEGIN_SRC python :tangle db.py :eval no 
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by NodalCentre id: %s"  % id)
        return NodalCentre.query.get(id)

#+END_SRC
***** Test getNodalCentre: Id --> NodalCentre
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_nodal_centre_by_id(self):
        print "test_get_nodal_centre_by_id"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()
        
        self.assertEqual(nodal_centre1.get_by_id(1).name, "IIIT-Hyd")
        self.assertEqual(nodal_centre2.get_by_id(2).name, "HCU")
#+END_SRC
***** getCreatedBy: NodalCentre --> User
#+BEGIN_SRC python :tangle db.py :eval no 
    def get_created_by(self):
        current_app.logger.debug("get of the user who created the NodalCentre: %s"  % self.created_by)
        return self.created_by

#+END_SRC

***** Test getCreatedBy: NodalCentre --> User
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nodal_centre_created_by(self):
        print "test_get_nodal_centre_created_by"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()

        centre_created_by = nodal_centre1.get_created_by()
        self.assertEqual(centre_created_by.name, "Ambika")

#+END_SRC

***** getName: NodalCentre --> Name
#+BEGIN_SRC python :tangle db.py :eval no 
    def get_name(self):
        current_app.logger.debug("get name of the NodalCentre: %s"  % self.name)
        return self.name
#+END_SRC

***** Test getName: NodalCentre --> Name 
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_nodal_centre_name(self):
        print "test_get_nodal_centre_name"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()

        centre_name = nodal_centre1.get_name()
        self.assertEqual(centre_name, "IIIT-Hyd")
#+END_SRC

***** getLocation: NodalCentre --> Location
#+BEGIN_SRC python :tangle db.py :eval no 
    def get_location(self):
        current_app.logger.debug("get location of the NodalCentre : %s"  % self.location)
        return self.location
#+END_SRC
      
***** Test getLocation: NodalCentre --> Location
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_nodal_centre_location(self):
        print "test_get_nodal_centre_location"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()

        centre_location = nodal_centre1.get_location()
        self.assertEqual(centre_location, "Gachibowli")
#+END_SRC

***** setCreatedBy: NodalCentre, User --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(created_by=User)
    def set_created_by(self, created_by):
        self.created_by = created_by

#+END_SRC

***** Test setCreatedBy: NodalCentre, User --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_set_nodalcentre_created_by(self):
        print "test_set_nodalcentre_created_by"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()

        nodal_centre1.set_created_by(user_2)
        nodal_centre1.save()

        centre = NodalCentre.get_by_id(1)
        self.assertEqual(centre.created_by, user_2)
#+END_SRC

***** setName: NodalCentre, Name --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    @typecheck(name=str)
    def set_name(self, name):
        self.name = name
#+END_SRC
      
***** Test setName: NodalCentre, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_set_nodal_centre_name(self):
        print "test_set_nodal_centre_name"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()

        nodal_centre2.set_name("IIIT-Hyd")
        nodal_centre2.save()
        centre = NodalCentre.get_by_id(2)
        self.assertEqual("IIIT-Hyd", centre.name)
#+END_SRC

***** Test setName: NodalCentre, Name --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_set_nodal_centre_name(self):
        print "test_set_nodal_centre_name"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()

        nodal_centre2.set_name("IIIT-Hyd")
        nodal_centre2.save()
        centre = NodalCentre.get_by_id(2)
        self.assertEqual("IIIT-Hyd", centre.name)
#+END_SRC

***** setLocation: NodalCentre, Location --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    @typecheck(location=str)
    def set_location(self, location):
        self.location = location
#+END_SRC

***** setLongitude: NodalCentre, Longitude --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    @typecheck(longitude=str)
    def set_longitude(self, longitude):
        self.longitude = longitude
#+END_SRC
***** setPincode: NodalCentre, Pincode --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    @typecheck(pincode=str)
    def set_pincode(self, pincode):
        self.pincode = pincode
#+END_SRC

***** Test setLocation: NodalCentre, Location --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nodal_centre_location(self):
        print "test_set_nodal_centre_location"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre1.save()

        nodal_centre1.set_location("Hyderabad")
        nodal_centre1.save()
        centre = NodalCentre.get_by_id(1)
        self.assertEqual("Hyderabad", centre.location)
#+END_SRC

***** Test Nodal Centre to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_nodal_centre_to_client(self):
        print "test_nodal_centre_to_client"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()

        saved_centre = NodalCentre.get_by_id(1)
        saved_centre_dict = saved_centre.to_client()
        self.assertEqual("IIIT-Hyd", saved_centre_dict['name'])
        self.assertEqual("Gachibowli", saved_centre_dict['location'])

#+END_SRC

***** setLattitude: NodalCentre, Lattitude --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    @typecheck(lattitude=str)
    def set_lattitude(self, lattitude):
        self.lattitude = lattitude
#+END_SRC

***** Test setLocation: NodalCentre, Location --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nodal_centre_location(self):
        print "test_set_nodal_centre_location"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre1.save()

        nodal_centre1.set_location("Hyderabad")
        nodal_centre1.save()
        centre = NodalCentre.get_by_id(1)
        self.assertEqual("Hyderabad", centre.location)
#+END_SRC


***** getCentreStatus: NodalCentre --> CentreStatus

#+BEGIN_SRC python :tangle db.py :eval no 
    def get_centre_status(self):
        current_app.logger.debug("get name of the NodalCentre: %s"  % self.centre_status)
        return self.centre_status
#+END_SRC
***** setCentreStatus: NodalCentre, CentreStatus --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    @typecheck(centre_status=str)
    def set_centre_status(self, centre_status):
        self.centre_status = centre_status
#+END_SRC
***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'created_by': self.created_by.to_client(),
            'name': self.name,
            'location': self.location,
            'pincode': self.pincode,
            'longitude': self.longitude,
            'lattitude': self.lattitude,
            'centre_status': self.centre_status
        }
#+END_SRC
      
***** Test Nodal Centre to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_nodal_centre_to_client(self):
        print "test_nodal_centre_to_client"
        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="HCU", location="Lingampalli", \
                                    created_by=user_2)               
        nodal_centre2.save()

        saved_centre = NodalCentre.get_by_id(1)
        saved_centre_dict = saved_centre.to_client()
        self.assertEqual("IIIT-Hyd", saved_centre_dict['name'])
        self.assertEqual("Gachibowli", saved_centre_dict['location'])

#+END_SRC

*** Nodal Coordinator Details
**** Immutable data
     + Id
     + Created
     
**** Mutable data
     + User --> Id
     + Last Updated
     + Created By 
     + Target Workshops
     + Target Participants
     + Target Experiments

**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class NodalCoordinatorDetail(Entity):

    __tablename__ = 'nodal_coordinator_details'

    id = db.Column(db.Integer, primary_key=True)

    created = db.Column(db.DateTime(), default=datetime.utcnow)
    last_updated = db.Column(db.String(128))
    target_workshops = db.Column(db.Integer)
    target_participants = db.Column(db.Integer)
    target_experiments = db.Column(db.Integer)

    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), unique=True)
    created_by_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    nodal_centre_id = db.Column(db.Integer, db.ForeignKey('nodal_centres.id'))

    user = relationship('User', foreign_keys=[user_id])
    created_by = relationship('User', foreign_keys=[created_by_id])
    nodal_centre = relationship('NodalCentre', foreign_keys=[nodal_centre_id])

 #+END_SRC

**** Constructor
#+BEGIN_EXAMPLE
    nodal_coordinator_detail = NodalCoordinatorDetail(user=<instance of class User>,
                                                      created_by=<instance of class User>,                  
                                                      nodal_centre=<instance of class NodalCentre>,
                                                      target_workshops=int,  
                                                      target_participants=int
                                                      [,target_experiments=int]
                                                      [,last_updated=str])
                                            
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no
    def __init__(self, **kwargs):

        if 'user' not in kwargs:
            raise AttributeRequired("mandatory attribute `user` is missing")
        self.set_user(kwargs['user'])

        if 'last_updated' in kwargs:
            self.set_last_updated(kwargs['last_updated'])

        if 'created_by' not in kwargs:
            raise AttributeRequired("mandatory attribute `created_by` is missing")
        self.set_created_by(kwargs['created_by'])

        if 'nodal_centre' not in kwargs:
            raise AttributeRequired("mandatory attribute `nodal_centre` is missing")
        self.set_nodal_centre(kwargs['nodal_centre'])

        if 'target_workshops' not in kwargs:
            raise AttributeRequired("mandatory attribute `target_workshops` is missing")
        self.set_target_workshops(kwargs['target_workshops'])

        if 'target_participants' not in kwargs:
            raise AttributeRequired("mandatory attribute `target_participants` is missing")
        self.set_target_participants(kwargs['target_participants'])

        if 'target_experiments' in kwargs:
            self.set_target_experiments(kwargs['target_experiments'])

        
    def __str__(self):
        return "last_updated = %s, user = %s, created_by = %s,\
        nodal_centre = %s, target_workshops = %s,  target_participants = %s,\
        target_experiments = %s" %  (self.last_updated, self.user,
                                     self.created_by, self.nodal_centre,
                                     self.target_workshops,
                                     self.target_participants,
                                     self.target_experiments)


    def __repr__(self):
        return "last_updated = %s, user = %s, created_by = %s,\
        nodal_centre = %s, target_workshops = %s,  target_participants = %s,\
        target_experiments = %s" %  (self.last_updated, self.user,
                                     self.created_by, self.nodal_centre,
                                     self.target_workshops,
                                     self.target_participants,
                                     self.target_experiments)


#+END_SRC
     
**** Tests for Nodal Coordinator Details Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
class TestNodalCoordinatorDetail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_nc_details_constructor(self):
        print "test_nc_details_constructor"

        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user_2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user_2, target_workshops=100,
                                             created_by=user_1,
                                             nodal_centre=nodal_centre1,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user_3, target_workshops=200,
                                             created_by=user_1,
                                             nodal_centre=nodal_centre1,
                                             target_participants=2000)
        nc_details2.save()


        self.assertEqual("madhavi@vlabs.ac.in", nc_details1.user.email)
        self.assertEqual("Madhavi", nc_details1.user.name)
        self.assertEqual("Ambika", nc_details1.created_by.name)
        self.assertEqual("IIIT-Hyd", nc_details1.nodal_centre.name)

        self.assertEqual("smith@vlabs.ac.in", nc_details2.user.email)
        self.assertEqual("Will Smith", nc_details2.user.name)
        self.assertEqual("Ambika", nc_details2.created_by.name)
        self.assertEqual("IIIT-Hyd", nc_details2.nodal_centre.name)

        
        self.assertEqual(100, nc_details1.target_workshops)
        self.assertEqual(1000, nc_details1.target_participants)                        
    
        # Calling the nc_details constructor without any arguments should raise
        # AttributeRequired exception
        self.assertRaises(AttributeRequired, NodalCoordinatorDetail)

        # Calling the nc_details constructor with necessary arguments but with
        # wrong type should raise TypeError
        self.assertRaises(TypeError, NodalCoordinatorDetail,
                          ,**{'user': User,
                             'created_by': User,
                             'nodal_centre': NodalCentre,
                             'target_workshops': '123',
                             'target_participants': 123
                         })

#+END_SRC
**** Functions that operate on the Nodal Coordinator Details domain
***** getAll: Nil --> set[NodalCoordinatorDetail]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of NodalCoordinatorDetail entity")
        return NodalCoordinatorDetail.query.all()

#+END_SRC
***** Test getAll: Nil --> set[NodalCoordinatorDetail]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_all_nc_details(self):
        print "test_get_all_nc_details"


        role1 = Role(name=Name("OC"))
        role1.save()

        role2 = Role(name=Name("NC"))
        role2.save()

        user_1 = User(name=Name("Ambika"),
                      email=Email("ambika@vlabs.ac.in"), role=role1)
        user_2 = User(name=Name("Madhavi"),
                      email=Email("madhavi@vlabs.ac.in"), role=role2)
        user_3 = User(name=Name("Will Smith"),
                      email=Email("smith@vlabs.ac.in"), role=role2)

        user_1.save()
        user_2.save()
        user_3.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user_1)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user_2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user_2, target_workshops=100,
                                             created_by=user_1,
                                             nodal_centre=nodal_centre1,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user_3, target_workshops=200,
                                             created_by=user_1,
                                             nodal_centre=nodal_centre1,
                                             target_participants=2000)
        nc_details2.save()

        nc_details_list = NodalCoordinatorDetail.get_all()

        self.assertEqual("madhavi@vlabs.ac.in", nc_details_list[0].user.email)
        self.assertEqual("Madhavi", nc_details_list[0].user.name)
        self.assertEqual("Ambika", nc_details_list[0].created_by.name)
        self.assertEqual("IIIT-Hyd", nc_details_list[0].nodal_centre.name)

        self.assertEqual("smith@vlabs.ac.in", nc_details_list[1].user.email)
        self.assertEqual("Will Smith", nc_details_list[1].user.name)
        self.assertEqual("Ambika", nc_details_list[1].created_by.name)
        self.assertEqual("IIIT-Hyd", nc_details_list[1].nodal_centre.name)

        
        self.assertEqual(100, nc_details_list[0].target_workshops)
        self.assertEqual(1000, nc_details_list[0].target_participants)                        

#+END_SRC
***** getNodalCoordinatorDetail: Id --> NodalCoordinatorDetail
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by NodalCoordinatorDetail id: %s"  % id)
        return NodalCoordinatorDetail.query.get(id)

#+END_SRC
***** Test getNodalCoordinatorDetail: Id --> NodalCoordinatorDetail
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_details_by_id(self):
        print "test_get_nc_details_by_id"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        self.assertEqual(nc_details1.get_by_id(1).user.name, user3.name)
#+END_SRC

***** getUser: NodalCoordinatorDetail --> User
#+BEGIN_SRC python :tangle db.py :eval no
    def get_user(self):
        current_app.logger.debug("get user from NodalCoordinatorDetail Entity: %s"  % self.user)
        return self.user

#+END_SRC

***** Test getUser: NodalCoordinatorDetail --> User
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_user(self):
        print "test_get_nc_user"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        nc_user = nc_details1.get_user()
        self.assertEqual(nc_user.name, user3.name)


#+END_SRC

***** getCreatedBy: NodalCoordinatorDetail --> User
#+BEGIN_SRC python :tangle db.py :eval no
    def get_created_by(self):
        current_app.logger.debug("get created_by user from NodalCoordinatorDetail: %s"  % self.created_by)
        return self.created_by

#+END_SRC

***** Test getCreatedBy: NodalCoordinatorDetail --> User
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_created_by(self):
        print "test_get_nc_created_by"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
       
        nc_details2.save()
        nc_created_by = nc_details1.get_created_by()
        self.assertEqual(nc_created_by.name, user2.name)


#+END_SRC

***** getNodalCentre: NodalCoordinatorDetail --> NodalCentre
#+BEGIN_SRC python :tangle db.py :eval no
    def get_nodal_centre(self):
        current_app.logger.debug("get nodal_centre from NodalCoordinatorDetail: %s"  % self.nodal_centre)
        return self.nodal_centre

#+END_SRC

***** Test getNodalCentre: NodalCoordinatorDetail --> NodalCentre
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_nodal_centre(self):
        print "test_get_nc_nodal_centre"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        nc_created_by = nc_details1.get_nodal_centre()
        self.assertEqual(nc_created_by.name, "IIIT-Hyd")


#+END_SRC

***** timeOfCreation: NodalCoordinatorDetail --> Datetime
#+BEGIN_SRC python :tangle db.py :eval no
    def get_created(self):
        current_app.logger.debug("get time of creation from NodalCoordinatorDetail: %s"  % self.created)
        return self.created
#+END_SRC

***** Test timeOfCreation: NodalCoordinatorDetail --> Datetime
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_details_toc(self):
        print "test_get_nc_details_toc"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        time = datetime.utcnow()
        year = time.year
        month = time.month    
        day = time.day
        minute = time.minute

        nc_details_toc = nc_details1.get_created()
        nc_year = nc_details_toc.year
        nc_month = nc_details_toc.month
        nc_day = nc_details_toc.day
        nc_min = nc_details_toc.minute

        self.assertEqual(nc_year, year)
        self.assertEqual(nc_month, month)
        self.assertEqual(nc_day, day)
        self.assertEqual(nc_min, minute)
#+END_SRC

***** getLastUpdated: NodalCoordinatorDetail --> String
#+BEGIN_SRC python :tangle db.py :eval no
    def get_last_updated(self):
        current_app.logger.debug("get created_by user from NodalCoordinatorDetail: %s"  % self.last_updated)
        return self.last_updated
#+END_SRC
      
***** Test getLastUpdated: NodalCoordinatorDetail --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_last_updated(self):
        print "test_get_nc_last_updated"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        nc_last_updated = nc_details1.get_last_updated()
        self.assertEqual(nc_last_updated, "Mon Nov 23 2015")
#+END_SRC

***** getTargetWorkshops: NodalCoordinatorDetail --> TargetWorkshops
#+BEGIN_SRC python :tangle db.py :eval no
    def get_target_workshops(self):
        current_app.logger.debug("get target_workshops from NodalCoordinatorDetail: %s"  % self.target_workshops)
        return self.target_workshops
#+END_SRC

***** Test getTargetWorkshops: NodalCoordinatorDetail --> TargetWorkshops
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_target_workshops(self):
        print "test_get_nc_target_workshops"

        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        self.assertEqual(nc_details1.get_target_workshops(), 100)
        self.assertEqual(nc_details2.get_target_workshops(), 200)
#+END_SRC

***** getTargetParticipants: NodalCoordinatorDetail --> TargetParticipants
#+BEGIN_SRC python :tangle db.py :eval no
    def get_target_participants(self):
        current_app.logger.debug("get target_participants from NodalCoordinatorDetail: %s"  % self.target_participants)
        return self.target_participants
#+END_SRC

***** Test getTargetParticipants: NodalCoordinatorDetail --> TargetParticipants
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_target_participants(self):
        print "test_get_nc_target_participants"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        self.assertEqual(nc_details1.get_target_participants(), 1000)
        self.assertEqual(nc_details2.get_target_participants(), 2000)
#+END_SRC

***** getTargetExperiments: NodalCoordinatorDetail --> TargetExperiments
#+BEGIN_SRC python :tangle db.py :eval no
    def get_target_experiments(self):
        current_app.logger.debug("get target_experiments from NodalCoordinatorDetail: %s"  % self.target_experiments)
        return self.target_experiments
#+END_SRC

***** Test getTargetExperiments: NodalCoordinatorDetail --> TargetExperiments
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_nc_target_experiments(self):
        print "test_get_nc_target_experiments"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=1600,
                                             target_participants=2000)
        nc_details2.save()
        self.assertEqual(nc_details1.get_target_experiments(), 800)
        self.assertEqual(nc_details2.get_target_experiments(), 1600)
#+END_SRC

***** setLastUpdated: NodalCoordinatorDetail, String --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_last_updated(self, last_updated):
        current_app.logger.debug("set last updated time of the NodalCoordinatorDetail: %s" % last_updated)
        self.last_updated = last_updated
#+END_SRC

***** Test setLastUpdated: NodalCoordinatorDetail, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nc_last_updated(self):
        print "test_set_nc_last_updated"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)

        nc_details2.save()
        nc_details1.set_last_updated("Tue Nov 24 2015")
        nc_details1.save()
        self.assertEqual("Tue Nov 24 2015", nc_details1.last_updated)

        nc_details2.set_last_updated("Wed Nov 25 2015")
        nc_details2.save()
        self.assertEqual("Wed Nov 25 2015", nc_details2.last_updated)        
#+END_SRC

***** setUser: NodalCoordinatorDetail, User --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(user=User)
    def set_user(self, user):
        current_app.logger.debug("set user of the NodalCoordinatorDetail: %s" % user)
        self.user = user

#+END_SRC

***** Test setUser: NodalCoordinatorDetail, User --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nc_user(self):
        print "test_set_nc_user"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()

        nc_details1.set_user(user1)
        nc_details1.save()
        nc_details = NodalCoordinatorDetail.get_by_id(1)
        self.assertEqual(nc_details.user, user1)

        nc_details2.set_user(user2)
        nc_details2.save()
        nc_details = NodalCoordinatorDetail.get_by_id(2)
        self.assertEqual(nc_details.user, user2)
        
#+END_SRC

***** setCreatedBy: NodalCoordinatorDetail, User --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(created_by=User)
    def set_created_by(self, created_by):
        current_app.logger.debug("set created by user of the NodalCoordinatorDetail: %s" % created_by)
        self.created_by = created_by

#+END_SRC

***** Test setCreatedBy: NodalCoordinatorDetail, User --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nc_created_by(self):
        print "test_set_nc_created_by"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)

        nc_details1.set_created_by(user2)
        nc_details1.save()
        nc_details = NodalCoordinatorDetail.get_by_id(1)
        self.assertEqual(nc_details.created_by, user2)

        nc_details2.set_created_by(user1)
        nc_details2.save()
        nc_details = NodalCoordinatorDetail.get_by_id(2)
        self.assertEqual(nc_details.created_by, user1)        
#+END_SRC

***** setNodalCentre: NodalCoordinatorDetail, NodalCentre --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(nodal_centre=NodalCentre)
    def set_nodal_centre(self, nodal_centre):
        current_app.logger.debug("set target workshops of the NodalCoordinatorDetail: %s" % nodal_centre)
        self.nodal_centre = nodal_centre

#+END_SRC

***** Test setNodalCentre: NodalCoordinatorDetail, NodalCentre --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nc_nodal_centre(self):
        print "test_set_nc_nodal_centre"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)


        nc_details1.set_nodal_centre(nodal_centre2)
        nc_details1.save()
        nc_details = NodalCoordinatorDetail.get_by_id(1)
        self.assertEqual(nc_details.nodal_centre, nodal_centre2)

        nc_details2.set_nodal_centre(nodal_centre1)
        nc_details2.save()
        nc_details = NodalCoordinatorDetail.get_by_id(2)
        self.assertEqual(nc_details.nodal_centre, nodal_centre1)        
#+END_SRC

***** setTargetWorkshops: NodalCoordinatorDetail, Int --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_target_workshops(self, target_workshops):
        current_app.logger.debug("set target workshops of the NodalCoordinatorDetail: %s" % target_workshops)
        self.target_workshops = target_workshops
#+END_SRC

***** Test setTargetWorkshops: NodalCoordinatorDetail, Int --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nc_target_workshops(self):
        print "test_set_nc_target_workshops"

        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()

        nc_details1.set_target_workshops(500)
        nc_details1.save()
        self.assertEqual(500, nc_details1.target_workshops)
#+END_SRC

***** setTargetParticipants: NodalCoordinatorDetail, Int --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_target_participants(self, target_participants):
        current_app.logger.debug("set target participants of the NodalCoordinatorDetail: %s" % target_participants)
        self.target_participants = target_participants
#+END_SRC
      
***** Test setTargetParticipants: NodalCoordinatorDetail, Int --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nc_target_participants(self):
        print "test_set_nc_target_participants"

        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()

        nc_details1.set_target_participants(800)
        nc_details1.save()
        self.assertEqual(800, nc_details1.target_participants)

        nc_details2.set_target_participants(1600)
        nc_details2.save()
        self.assertEqual(1600, nc_details2.target_participants)
#+END_SRC

***** setTargetExperiments: NodalCoordinatorDetail, Int --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    def set_target_experiments(self, target_experiments):
        current_app.logger.debug("set target experiments of the NodalCoordinatorDetail: %s" % target_experiments)
        self.target_experiments = target_experiments
#+END_SRC

***** Test setTargetExperiments: NodalCoordinatorDetail, Int --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_nc_target_experiments(self):
        print "test_set_nc_target_experiments"

        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()

        nc_details1.set_target_experiments(1800)
        nc_details1.save()
        self.assertEqual(1800, nc_details1.target_experiments)

        nc_details2.set_target_experiments(1600)
        nc_details2.save()
        self.assertEqual(1600, nc_details2.target_experiments)        
#+END_SRC

***** to_client
#+BEGIN_SRC python :tangle db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'user': self.user.to_client(),
            'created_by': self.created_by.to_client(),
            'nodal_centre': self.nodal_centre.to_client(),         
            'last_updated': self.last_updated,
            'created': self.created.isoformat(),
            'target_workshops': self.target_workshops,
            'target_participants': self.target_participants,
            'target_experiments': self.target_experiments
        }
#+END_SRC
      
***** Test Nodal Coordinator Details to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_nc_details_to_client(self):
        print "test_nc_details_to_client"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)

        saved_nc = NodalCoordinatorDetail.get_by_id(1)
        saved_nc_dict = saved_nc.to_client()
        self.assertEqual(100, saved_nc_dict['target_workshops'])
        self.assertEqual(1000, saved_nc_dict['target_participants'])

#+END_SRC

*** Workshop Reports
**** Immutable data
     + Id
  
**** Mutable data
     + Path
     + Workshop Id

**** Definition
#+BEGIN_SRC python :tangle db.py :eval no
class WorkshopReport(Entity):

    __tablename__ = 'workshop_reports'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    path = db.Column(db.String(128))
    workshop_id = db.Column(db.Integer, db.ForeignKey('workshops.id'))

#+END_SRC

**** Constructor
#+BEGIN_EXAMPLE 
    workshop_report = WorkshopReport(name=str, path=str,  workshop=<instance of class Workshop>)
                                            
#+END_EXAMPLE
#+BEGIN_SRC python :tangle db.py :eval no 
    def __init__(self, **kwargs):

        if 'workshop' not in kwargs:
            raise AttributeRequired("mandatory attribute `workshop` is missing")
        self.set_workshop(kwargs['workshop'])
        
        if 'path' in kwargs:
            self.set_path(kwargs['path'])

        if 'name' not in kwargs:
            raise AttributeRequired("mandatory attribute `name` is missing")
        self.set_name(kwargs['name'])

    def __str__(self):
        return "workshop = %s, name = %s, path = %s" % \
            (self.workshop, self.name, self.path)

    def __repr__(self):
        return "workshop = %s, name=%s, path = %s" % \
            (self.workshop, self.name, self.path)

#+END_SRC

**** Tests for Workshop Report Constructor
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
class TestWorkshopReport(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        
#+END_SRC
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_workshop_report_constructor(self):
        print "test_workshop_report_constructor"

        role = Role(name=Name("Admin"))
        role.save()
    
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"),
                    role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()
           
        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU, IIIT-Hyd",
                            no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status,
                            date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")

        workshop.save()
        
        workshop_report = WorkshopReport(name="College Report", workshop=workshop)
        workshop_report.save()
        
        # Calling the workshop_report constructor without any arguments should
        # raise AttributeRequired exception
        self.assertRaises(AttributeRequired, WorkshopReport)

        # Calling the workshop_report constructor with necessary arguments
        # (workshop,path) but with wrong type should raise TypeError
        self.assertRaises(TypeError, WorkshopReport,
                          ,**{'path': 12,
                              'name':"College Report",
                             'workshop': workshop
                            })

#+END_SRC
**** Functions that operate on the Workshop Report domain
***** getAll: Nil --> set[WorkshopReport]
#+BEGIN_SRC python :tangle db.py :eval no
    @staticmethod
    def get_all():
        current_app.logger.debug("get all rows of WorkshopReport entity")
        return WorkshopReport.query.all()

#+END_SRC

***** Test getAll: Nil --> set[WorkshopReport]
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_workshop_reports_get_all(self):
        print "test_workshop_reports_get_all"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()
           
        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        workshop.save()
        
        workshop_report1 = WorkshopReport(name="College Report", path="/static/uploads/college-reports/file.pdf",
                             workshop=workshop)
        workshop_report1.save()

        workshop_report2 = WorkshopReport(name="Workshop Photos", path="/static/uploads/college-reports/photos.png",
                             workshop=workshop)
        workshop_report2.save()

        workshop_report_list = WorkshopReport.get_all()
        
        self.assertEqual("College Report", workshop_report_list[0].name)
        self.assertEqual("Workshop Photos", workshop_report_list[1].name)

        self.assertEqual("/static/uploads/college-reports/file.pdf", workshop_report_list[0].path)
        self.assertEqual("/static/uploads/college-reports/photos.png", workshop_report_list[1].path)

#+END_SRC

***** getWorkshopReport: Id --> WorkshopReport
#+BEGIN_SRC python :tangle db.py :eval no 
    @staticmethod
    def get_by_id(id):
        current_app.logger.debug("get by WorkshopReport id: %s"  % id)
        return WorkshopReport.query.get(id)

#+END_SRC

***** Test getWorkshopReport: Id --> WorkshopReport
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_workshop_report_by_id(self):
        print "test_get_document_by_id"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        workshop.save()
        
        workshop_report = WorkshopReport(name="College Report", path="/static/uploads/college-reports/file.pdf", workshop=workshop)
        workshop_report.save()

        self.assertEqual(workshop_report.get_by_id(1).path, "/static/uploads/college-reports/file.pdf" )
        self.assertEqual(workshop_report.get_by_id(1).name, "College Report" )

#+END_SRC
     
***** getPath: WorkshopReport --> String
#+BEGIN_SRC python :tangle db.py :eval no
    def get_path(self):
        current_app.logger.debug("get path of the WorkshopReport: %s"  % self.path)
        return self.path
#+END_SRC

***** Test getPath: WorkshopReport --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_get_workshop_report_path(self):
        print "test_get_workshop_report_path"
        name = Name("Admin")

        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        workshop.save()

        workshop_report = WorkshopReport(name="College Report", path="/static/uploads/college-reports/file.pdf", workshop=workshop)
        workshop_report.save()

        workshop_report_path = workshop_report.get_path()
        self.assertEqual(workshop_report_path, "/static/uploads/college-reports/file.pdf")

#+END_SRC
     
***** getName: WorkshopReport --> String
#+BEGIN_SRC python :tangle db.py :eval no
    def get_name(self):
        current_app.logger.debug("get name of the WorkshopReport: %s"  % self.name)
        return self.name
#+END_SRC

***** Test getName: WorkshopReport --> String
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_workshop_report_name(self):
        print "test_get_workshop_report_name"
        name = Name("Admin")

        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        workshop.save()

        workshop_report = WorkshopReport(name="College Report", path="/static/uploads/college-reports/file.pdf", workshop=workshop)
        workshop_report.save()

        workshop_report_name = workshop_report.get_name()
        self.assertEqual(workshop_report_name, "College Report")

#+END_SRC
     
***** getWorkshop: WorkshopReport --> Workshop
#+BEGIN_SRC python :tangle db.py :eval no 
    def get_workshop(self):
        current_app.logger.debug("get workshop of the WorkshopReport: %s"  % self.workshop)
        return self.workshop
#+END_SRC
***** TestWorkshop: WorkshopReport --> Workshop
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_get_workshop_report_workshop(self):
        print "test_get_workshop_report_workshop"
        role = Role(name=Name("Admin"))
        user = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        status = Status(name=Name("Upcoming"))
        status.save()

        workshop = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")
        workshop_report = WorkshopReport(name="College Report", path="/static/uploads/college-reports/file.pdf", workshop=workshop)
        workshop_report.save()

        workshop = workshop_report.get_workshop()
        self.assertEqual("Coordinators Training", workshop.name )

#+END_SRC
***** setPath: WorkshopReport, String --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    @typecheck(path=str)
    def set_path(self, path):
        current_app.logger.debug("set path of the WorkshopReport: %s" % path)
        self.path = path
#+END_SRC

***** Test setPath: WorkshopReport, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_set_workshop_report_path(self):
        print "test_set_workshop_report_path"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        workshop.save()
        
        workshop_report = WorkshopReport(name="College Report", path="/static/uploads/college-reports/file.pdf", workshop=workshop)
        workshop_report.save()

        workshop_report.set_path("/static/uploads/college-reports/file.doc")
        workshop_report.save()

        doc = workshop_report.get_by_id(1)
        self.assertEqual(doc.path, "/static/uploads/college-reports/file.doc")
#+END_SRC
      
***** setName: WorkshopReport, String --> Void
#+BEGIN_SRC python :tangle db.py :eval no 
    @typecheck(name=str)
    def set_name(self, name):
        current_app.logger.debug("set name of the WorkshopReport: %s" % name)
        self.name = name
#+END_SRC

***** Test setName: WorkshopReport, String --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_set_workshop_report_name(self):
        print "test_set_workshop_report_name"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        workshop.save()
        
        workshop_report = WorkshopReport(name="College Report", path="/static/uploads/college-reports/file.pdf", workshop=workshop)
        workshop_report.save()

        workshop_report.set_name("Workshop Photos")
        workshop_report.save()

        doc = workshop_report.get_by_id(1)
        self.assertEqual(doc.name, "Workshop Photos")
#+END_SRC
      
***** setWorkshop: WorkshopReport, Workshop --> Void
#+BEGIN_SRC python :tangle db.py :eval no
    @typecheck(workshop=Workshop)
    def set_workshop(self, workshop):
        current_app.logger.debug("set workshop of the WorkshopReport: %s" % workshop)
        self.workshop = workshop

#+END_SRC

***** Test setWorkshop: WorkshopReport, Workshop --> Void
#+BEGIN_SRC python :tangle tests/test_db.py :eval no
    def test_set_workshop_report_workshop(self):
        print "test_set_workshop_report_workshop"
        role = Role(name=Name("Admin"))

        user1 = User(name=Name("ambika"), email=Email("ambika@vlabs.ac.in"), role=role)
        user2 = User(name=Name("madhavi"), email=Email("madhavi@vlabs.ac.in"), role=role)

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop1 = Workshop(name="Training", location="IIIT-Hyd",
                            user=user1, participating_institutes="HCU, IIIT-Hyd",
                            no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")


        workshop1.save()

        workshop2 = Workshop(name="Training", location="IIT-D",
                            user=user2, participating_institutes="HCU, IIIT-Hyd", 
                            no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")
        
        workshop2.save()

        workshop_report = WorkshopReport(name= "College Report", path="/static/uploads/college-reports/file.pdf", workshop=workshop1)
        workshop_report.save()
     
        workshop_report.set_workshop(workshop2)
        workshop_report.save()
        self.assertEqual(workshop_report.workshop.location, "IIT-D")
#+END_SRC
***** to_client
#+BEGIN_SRC python :tangle db.py :eval no 
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name,
            'path': self.path,
            'workshop': self.workshop.to_client()
        }
#+END_SRC
      
***** Test WorkshopReport to_client
#+BEGIN_SRC python :tangle tests/test_db.py :eval no 
    def test_workshop_report_to_client(self):
        print "test_workshop_report_to_client"

        name = Name("Admin")
        role = Role(name=name)
        role.save()
         
        user = User(name=Name("Ambika"), email=Email("ambika@vlabs.ac.in"), role = role)
        user.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop = Workshop(name="Coordinators Training", location="IIIT-Hyd",
                            user=user, participating_institutes="HCU,\
                            IIIT-Hyd", no_of_participants_expected=100,
                            no_of_sessions=3, labs_planned=4,
                            status=status, date="Mon Nov 23 2015 06:18:26\
                            GMT-0500 (EST)")
        workshop.save()

        workshop_report = WorkshopReport(name="College Reports", path="/static/uploads/college-reports/file.pdf", workshop=workshop)
        workshop_report.save()

        doc = workshop_report.get_by_id(1)
        doc_dict = doc.to_client()
        self.assertEqual("/static/uploads/college-reports/file.pdf", doc_dict['path'])
        self.assertEqual("College Reports", doc_dict['name'])

#+END_SRC

** Custom Exceptions
These are some of the custom exceptions used in the application.
*** AttributeRequired
#+BEGIN_SRC python :tangle op_exceptions.py :eval no
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC

** Utility Functions
#+BEGIN_SRC python :tangle utils.py :eval no
# module to hold all utilities/helper functions

import json

from flask import make_response, current_app


# return a list of dicts as json with correct mime types
# flask does not provide a jsonify for lists; hence this method
def jsonify_list(data):
    if type(data) is not list:
        raise Exception('jsonify_list function accepts only a list')

    return make_response(json.dumps(data), 200,
                         {'content-type': 'application/json'})


# take in a flask request object and try to parse out a dictionary from the
# request
# try to find if request is as JSON first, then look into forms, finally force
# find it.
# If not found return a dict; else return the parsed data
def parse_request(request):
    if request.json:
        # print 'found in request.json'
        data = request.get_json()

    elif request.data:
        # print 'found in request.data'
        data = json.loads(request.data)

    elif request.form:
        # print 'found in request.form'
        data = request.form.to_dict()
        # try to detect if form contains integers and boolean data and attempt
        # to convert them
        # FIXME: is this a good idea? Fix this to do it in a better way?
        for k in data:
            if is_number(data[k]):
                try:
                    data[k] = int(data[k])
                except Exception, e :
                    data[k] =  str(data[k])
            if is_bool_in_str(data[k]):
                data[k] = str_to_bool(data[k])

            # print k, data[k]

    else:
        data = request.get_json(force=True)

    if not data:
        return False

    return data


# check if a given string is a number
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


# check if in a given string python bool types are represented
def is_bool_in_str(s):
    if s == "True" or s == "False":
        return True
    return False


# convert python bool types in string to native bool types
def str_to_bool(s):
    if s == "True":
        return True
    if s == "False":
        return False
    return None


# decorator to do typechecking of arguments passed to functions
# usage: @typecheck(var1=<type>, var2=(<type1>, <type2>), ..)
#        def yourfunc(var1, var2, ..):
#           ....
def typecheck(**typemap):
    """
    Decorator to do typechecking of arguments passed to functions. Similar to
    function annotations in Python 3, but this also does strict type checking
    when a function is called.
    The type to an argument can be single or multiple types. Mutiple types are
    to be specified in a tuple.
    Usage:
        @typecheck(var1=<type>, var2=(<type1>, <type2>), ..)
        def yourfunc(var1, var2, ..):
            ....
    """
    # print "all valid types: %s" % typemap

    def make_wrapper(decorated_func):

        def wrapper(*arg_vals, **kw_vals):
            # TODO: have more comments to better describe each line
            arg_names = decorated_func.func_code.co_varnames
            # print arg_names
            # if not arg_vals:
            #     print kw_vals
            #     # arg_vals = kw_vals
            # print arg_vals

            # iterate over the typemap passed to the typecheck decorator and
            # compare with the actual arguments passed to the function
            for key, val in typemap.iteritems():
                arg_name = key
                idx = arg_names.index(arg_name)
                arg = arg_vals[idx]
                # print "arg_name: %s, arg: %s, typemap[arg_name]: %s" %\
                #    (arg_name, arg, typemap[arg_name])

                # if the passed type is a list throw an error
                if typemap[arg_name] is list:
                    raise SyntaxError("The types of %s has to be a tuple, "
                                      "not list. \n See usage of `typecheck`" %
                                      arg_name)

                # check if the passed type is a tuple, if not make it
                if typemap[arg_name] is not tuple:
                    types = (typemap[arg_name],)
                else:
                    types = typemap[arg_name]

                # iterate over the `types` tuple to see the arg matches any of
                # the type provided in the tuple
                if True not in map(lambda type: isinstance(arg, type), types):
                    # print "types are not fine"
                    raise TypeError("For %s type should have been %s. But "
                                    "provided: %s" % (arg_name,
                                                      typemap[arg_name],
                                                      type(arg)))

            return decorated_func(*arg_vals, **kw_vals)
        return wrapper

    return make_wrapper

#+END_SRC

** The web application
#+BEGIN_SRC python :tangle app.py :eval no
# -*- coding: utf-8 -*-
import os

from flask import Flask, jsonify, make_response
from flask_cors import CORS

from db import db
from api import api
# import config file
import config
from config import LOG_FILE_DIRECTORY
from config import LOG_FILE
from config import LOG_LEVEL


def create_app(config):
    # init our app
    app = Flask(__name__)
    app.secret_key = 'djfjsdkjXXS7979dfdfd'
    # restrict file uploading size to 2MB
    app.config['MAX_CONTENT_LENGTH'] = 2 * 1024 * 1024
    # load config values from the config file
    app.config.from_object(config)

    # init sqlalchemy db instance
    db.init_app(app)
    db.app = app
    # register blueprints
    app.register_blueprint(api)
    configure_logging(app)
    configure_errorhandlers(app)
#    cors = CORS(app, resources={r"/*": {"origins": "*"}})

    #  configure_cors(app)
    # all set; return app object
    return app


# custom error handlers to return JSON errors with appropiate status codes
def configure_errorhandlers(app):

    @app.errorhandler(500)
    def server_error(err):
        app.logger.error("error code = %s" % "500")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 500)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 500)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 500)
                app.logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(405)
    def method_not_allowed(err):
        app.logger.error("error code = %s" % "405")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 405)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 405)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 405)
                app.logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(413)
    def method_not_allowed(err):
	app.logger.error("error code = %s" % "413")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 413)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 413)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 413)
                app.logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(404)
    def not_found(err):
        app.logger.error("error code = %s" % "404")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 404)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 404)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 404)
                app.logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(400)
    def bad_request(err):
        app.logger.error("error code = %s" % "400")
        resp = None
        try:
            app.logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 400)
        except Exception:
            try:
                app.logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 400)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 400)
                app.logger.error("error = %s" % str(err))
        return resp


def configure_logging(app):
    import logging
    import logging.handlers
    formatter = logging.Formatter('%(asctime)s: %(levelname)s: %(filename)s:'
                                  ' %(funcName)s():%(lineno)d: %(message)s')

    # Also error can be sent out via email. So we can also have a SMTPHandler?
    log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                           '..',
                           LOG_FILE_DIRECTORY)

    log_file = "%s/%s" % (log_dir, LOG_FILE)
    os.system("sudo touch %s" % log_file)
    os.system("sudo chmod 777 %s" % log_file)
    max_size = 1024 * 1024 * 20  # Max Size for a log file: 20MB
    log_handler = logging.handlers.RotatingFileHandler(log_file,
                                                       maxBytes=max_size,
                                                       backupCount=10)

    log_level = LOG_LEVEL
    
    log_handler.setFormatter(formatter)

    app.logger.addHandler(log_handler)
    app.logger.setLevel(log_level)

if __name__ == "__main__":
    app = create_app(config)
    app.run(debug=True, host='0.0.0.0', threaded=True)

#+END_SRC

** Configuring the application
Below is the configuration for the application
#+BEGIN_SRC python :tangle config.py :eval no
# DB URI
# example DB URI:
# mysql+oursql://scott:tiger@localhost/mydatabase
# postgresql+psycopg2://scott:tiger@localhost/mydatabase
SQLALCHEMY_DATABASE_URI = 'mysql+oursql://<user_id>:<password>@<server_name>/<db_name>'
# example
# SQLALCHEMY_DATABASE_URI = 'mysql+oursql://root:mysql@localhost/outreach'

# Debug from SQLAlchemy
# Turn this to False on production
SQLALCHEMY_ECHO = False
SQLALCHEMY_TRACK_MODIFICATIONS = True

# List of allowed origins for CORS
ALLOWED_ORIGINS = "['*']"

# List of allowed IPs
WHITELIST_IPS = ["127.0.0.1"]

# Configure your log paths
LOG_FILE_DIRECTORY = 'logs'
LOG_FILE = 'outreach.log'

# Log level for the application
#10=DEBUG, 20=INFO, 30=WARNING, 40=ERROR, 50=CRITICAL",
LOG_LEVEL = 10

# destination for uploaded files
# example value - '/static/uploads/'
UPLOAD_DIR_PATH = '/static/uploads/'

# allowed file extensions that can be uploaded
ALLOWED_FILE_EXTENSIONS = ['txt', 'TXT', 'pdf', 'PDF', 'png', 'PNG', 'jpg', 'JPG', 'jpeg', 'JPEG', 'csv' , 'CSV']

# APP_URL
ELASTIC_IP = "http://10.100.2.40:9200"
#APP_URL = "http://localhost"
APP_URL = "<app_url>"
REDIRECT_URI = "<app_url>/authorized"

# Persona Verifier URL
PERSONA_VERIFIER_URL = "https://verifier.login.persona.org/verify"


#Google Authentication Credentials
CONSUMER_KEY = "461232146926-t0p85bhd3556qrhpdcjcn56v1sbicm06.apps.googleusercontent.com"
CONSUMER_SECRET = "wicsOBnV5798Te8DykvmxBjY"

EMAIL_FOR_GET_AUTH = "admin@vlabs.ac.in"
TOKEN_FOR_GET_AUTH = "dummytoken"

#+END_SRC

** Deploying the application
   For deploying the application, we use WSGI standard for Python
   applications.
   For that we need to write a WSGI script as follows.
#+BEGIN_SRC python :tangle outreach.wsgi :eval no
import sys, os

BASE_DIR = BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, BASE_DIR)

from app import create_app

import config as config

application = create_app(config)

#+END_SRC

** Model Diagram
    The model-diagram can be found below. This gives an overview of the
    relationships between different entities.

    [[../img


/model-diagram.jpg][Model-Diagram]] 

** REST APIs to read and query data
   These are the set of REST APIs for read operations.

*** Design
   The REST APIs to get and query data are designed in a generic
   way. That is, APIs for each entity is not designed and implemented
   specifically, rather three generic API patterns are designed which,
   presumably, will capture all kinds of query patterns.

   The three API patterns are:
   1. =/<:entity>s?query_param1=val1&query_param2=val2&..query_paramn=valn=
   2. =/<:entity>s/<:id>?fields=field1,field2,field3=

   =<:entity>s= are defined in the corresponding look up table.

   Let's explain each URL pattern:
   1. The first URL pattern is to get record(s) of an entity which
      satisfies some query parameters. Note, if one does not pass any
      query parameter, it returns all records of that entity.  For
      example:
      1. To get all workshops that are completed and where labs_planned
         are 5.
        #+BEGIN_EXAMPLE
	GET /workshops?status=completed&labs_planned=5
	#+END_EXAMPLE
      2. To get all roles in the system:
         #+BEGIN_EXAMPLE
	 GET /roles
	 #+END_EXAMPLE
      3. To get all the workshops where status is completed:
         #+BEGIN_EXAMPLE
	 GET /workshops?status=completed
	 #+END_EXAMPLE
   2. The second URL pattern is to get details of a particular record,
      identified by a unique identifier =id=. The records can be
      further filtered down with only desired attributes.  For example:
      1. Get only few details of a particular workshop (where the workshop id
         is known before):
         #+BEGIN_EXAMPLE
	 GET /workshops/2?fields=name, user, participants_attended, status
	 #+END_EXAMPLE
      2. Get all the details of particular user (presuming the id
         is known beforehand):
         #+BEGIN_EXAMPLE
	 GET /users/2
	 #+END_EXAMPLE

   Note that, nesting of entities in the URL API is only allowed till
   2nd level. Arbitrary nesting of entities might have the problem of
   falling into infinite loop while querying.

   Also note that, attributes with multiple values are
   comma-separated; and the default action is to use AND operation
   among them. If the OR operation is needed, they need to be
   substituted by '+'. 

   In the above, a valid =<:entity>s= can be any of the keywords
   defined in the look up table. Like, =roles=, =users=,
   =reference_documents=. Note that the entity name is always
   plural, but the look up table maps the plural keyword to a
   particular entity (which is usually in singular form).

   Look up table would be like (this is an example, not the
   implementation):
#+BEGIN_SRC python
  entity_map = {
      'roles': Role,
      'users': User,
      'reference_documents': ReferenceDocument,
      'status': Status,
      'workshop': Workshop,
      'nodal_centre': NodalCentre,
      'nodal_coordinator_detail': NodalCoordinatorDetail,
      'workshop_reports':WorkshopReport
    }
#+END_SRC

*** Implementation
**** Attributes of an entity and their relationship
     All the attributes of an entity and the relationship between the entity
     and the attribute is captured to facilitate run time creation of queries.

#+BEGIN_SRC python :tangle maps.py :eval no
from db import *
role = {'entity_class': Role,
        'attributes': [
            {'name': 'id',
             'class': None,
             'relationship': 'one'},
            {'name': 'name',
             'class': None,
             'relationship': 'one'},
            {'name': 'users',
             'class': User,
             'relationship': 'many'}
            ]}

user = {'entity_class': User,
        'attributes': [
            {'name': 'id',
             'class': None,
             'relationship': 'one'},
            {'name': 'name',
             'class': None,
             'relationship': 'one'},
            {'name': 'email',
             'class': None,
             'relationship': 'one'},
            {'name': 'created',
             'class': None,
             'relationship': 'one'},
            {'name': 'last_active',
             'class': None,
             'relationship': 'one'},
            {'name': 'institute_name',
             'class': None,
             'relationship': 'one'},
            {'name': 'role',
             'class': Role,
             'relationship': 'many'},
            {'name': 'reference_documents',
             'class': ReferenceDocument,
             'relationship': 'many'},
            {'name': 'workshops',
             'class': Workshop,
             'relationship': 'many'},
            {'name': 'user_id',
             'class': NodalCoordinatorDetail,
             'relationship': 'one'},
            {'name': 'created_by_user_id',
             'class': NodalCoordinatorDetail,
             'relationship': 'one'},
            {'name': 'nodal_centres',
             'class': NodalCentre,
             'relationship': 'many'},
            {'name': 'user_status',
             'class': None,
             'relationship': 'one'}
            
        ]}

reference_document = {'entity_class': ReferenceDocument,
                     'attributes': [
                         {'name': 'id',
                          'class': None,
                          'relationship': 'one'},
                         {'name': 'name',
                          'class': None,
                          'relationship': 'one'},
                         {'name': 'path',
                          'class': None,
                          'relationship': 'one'},
                         {'name': 'user',
                          'class': User,
                          'relationship': 'one'}
                     ]}

status = {'entity_class': Status,
        'attributes': [
            {'name': 'id',
             'class': None,
             'relationship': 'one'},
            {'name': 'name',
             'class': None,
             'relationship': 'one'},
            {'name': 'workshops',
             'class': Workshop,
             'relationship': 'many'}
            ]}

institute_analytics = {'entity_class': InstituteAnalytics,
	     'attributes': [
                 {'name': 'id',
                  'class': None,
	          'relationship': 'one'},
                 {'name': 'institute_name',
                  'class': None,
                  'relationship': 'one'},
                 {'name': 'total_workshops',
                  'class': None,
                  'relationship': 'one'},
                 {'name': 'total_usage',
                  'class': None,
                  'relationship': 'one'},
                 {'name': 'total_participants_attended',
                  'class': None,
                  'relationship': 'one'},
                 {'name': 'user_id',
                  'class': None,
                  'relationship': 'one'}

             ]}

nc_analytics = {'entity_class': NodalCentreAnalytics,
	     'attributes': [
                 {'name': 'id',
                  'class': None,
	          'relationship': 'one'},
                 {'name': 'institute_name',
                  'class': None,
                  'relationship': 'one'},
                 {'name': 'total_nodal_centres',
                  'class': None,
                  'relationship': 'one'},
                 {'name': 'user_id',
                  'class': None,
                  'relationship': 'one'}
             ]}


analytics = {'entity_class': Analytics,
	     'attributes': [
                 {'name': 'id',
                  'class': None,
	          'relationship': 'one'},
                 {'name': 'name',
                  'class': None,
                  'relationship': 'one'},
                 {'name': 'total_value',
                  'class': None,
                  'relationship': 'one'}
             ]}

workshop = {'entity_class': Workshop,
            'attributes': [
                {'name': 'id',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'name',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'location',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'user',
                 'class': User,
                 'relationship': 'one'},
                {'name': 'participating_institutes',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'no_of_participants_expected',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'participants_attended',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'no_of_sessions',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'duration_of_sessions',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'disciplines',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'labs_planned',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'experiments_conducted',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'other_details',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'status',
                 'class': Status,
                 'relationship': 'one'},
                {'name': 'cancellation_reason',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'not_approval_reason',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'gateway_ip',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'version',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'created',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'last_updated',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'date',
                 'class': None,
                 'relationship': 'one'},
                {'name': 'workshop_reports',
                 'class': WorkshopReport,
                 'relationship': 'many'},
                {'name': 'workshop_status',
                 'class': None,
                 'relationship': 'one'}
            ]}


nodal_coordinator_detail = {'entity_class': NodalCoordinatorDetail,
                            'attributes': [
                                {'name': 'id',
                                 'class': None,
                                 'relationship': 'one'},
                                {'name': 'user',
                                 'class': User,
                                 'relationship': 'one'},
                                {'name': 'created_by',
                                 'class': User,
                                 'relationship': 'one'},
                                {'name': 'target_workshops',
                                 'class': None,
                                 'relationship': 'one'},
                                {'name': 'target_participants',
                                 'class': None,
                                 'relationship': 'one'},
                                {'name': 'target_experiments',
                                 'class': None,
                                 'relationship': 'one'},
                                {'name': 'created',
                                 'class': None,
                                 'relationship': 'one'},
                                {'name': 'last_updated',
                                 'class': None,
                                 'relationship': 'one'},
                                {'name': 'nodal_centres',
                                 'class': NodalCentre,
                                 'relationship': 'many'}
            ]}

nodal_centre = {'entity_class': NodalCentre,
                'attributes': [
                    {'name': 'id',
                     'class': None,
                     'relationship': 'one'},
                    {'name': 'created_by',
                     'class': User,
                     'relationship': 'one'},
                    {'name': 'coordinators',
                     'class': NodalCoordinatorDetail,
                     'relationship': 'many'},
                    {'name': 'name',
                     'class': None,
                     'relationship': 'one'},
                    {'name': 'location',
                     'class': None,
                     'relationship': 'one'},
                     {'name': 'pincode',
                     'class': None,
                     'relationship': 'one'},
                     {'name': 'longitude',
                     'class': None,
                     'relationship': 'one'},
                     {'name': 'lattitude',
                     'class': None,
                     'relationship': 'one'},
                     {'name': 'centre_status',
                     'class': None,
                     'relationship': 'one'}
                     
            ]}

workshop_report = {'entity_class': WorkshopReport,
                  'attributes': [
                      {'name': 'id',
                       'class': None,
                       'relationship': 'one'},
                      {'name': 'path',
                       'class': None,
                       'relationship': 'one'},
                      {'name': 'workshop',
                       'class': Workshop,
                       'relationship': 'one'}
                  ]}

roles = role
users = user
reference_documents = reference_document
status=status
workshops = workshop
nodal_coordinator_details = nodal_coordinator_detail
nodal_centres = nodal_centre
workshop_reports = workshop_report
institute_analytics = institute_analytics
nc_analytics = nc_analytics
analytics= analytics

entity_pairs = {
    'roles': role,
    'users': user,
    'status':status,
    'reference_documents': reference_document,
    'workshops': workshop,
    'nodal_coordinator_details': nodal_coordinator_detail,
    'nodal_centres': nodal_centre,
    'workshop_reports': workshop_report,
    'institute_analytics': institute_analytics,
    'nc_analytics': nc_analytics,
    'analytics': analytics
}
                   
#+END_SRC
     
**** GET APIS
***** Google OAuth Credentials
      - Google OAuth service required URLs (Credentials) should be specified
#+BEGIN_SRC python :tangle api.py :eval 
session_list = {}
oauth = OAuth()

google_oauth = oauth.remote_app(
    'google',
    consumer_key=CONSUMER_KEY,
    consumer_secret=CONSUMER_SECRET,
    request_token_params={
        'scope': 'email', 'prompt' : 'select_account'
    },
    base_url='https://www.googleapis.com/oauth2/v1/',
    request_token_url=None,
    access_token_method='POST',
    access_token_url='https://accounts.google.com/o/oauth2/token',
    authorize_url='https://accounts.google.com/o/oauth2/auth',
)

#+END_SRC

***** =Login= API
      - When user clicks on =login= button from f/e it will invoke
        =/login= api and thereby it will forward request to =google=
#+BEGIN_SRC python :tangle api.py :eval 
def get_college_name(mac_addr):
    index_name = "college_cloud"
    doc_name = "details"
    ELASTIC_URL = "%s/%s/%s/_search" % (ELASTIC_IP, index_name, doc_name)
    current_app.logger.debug("ELASTIC_URL %s" % (ELASTIC_URL))
    colleges = requests.get(ELASTIC_URL)
    if colleges.status_code == 200:
        for college in colleges.json()['hits']['hits']:            
            mac_addr_of_elastic_data = str(college['_source']['mac_addr'])
            current_app.logger.debug("college_details %s" % (mac_addr_of_elastic_data))
            if mac_addr == mac_addr_of_elastic_data:
                return str(college['_source']['college_name'])
        abort(int(college.status_code), "Error in getting college name from elastic db")

@api.route('/login')
def login():
    return google_oauth.authorize(callback=url_for('APIs.authorized', _external=True))
#+END_SRC
***** =Logout= API
      - When user clicks on =logout= button from f/e it will invoke
  =/logout= api and thereby it will destroy all session variables.
#+BEGIN_SRC python :tangle api.py :eval 

@api.route('/logout')
def logout():
    if 'google_token' in session:
        session.pop('google_token', None)
        session.pop('role', None)
        session.pop('email', None)
        session.pop('id', None)
        session.pop('name', None)
        session.pop('token', None)

    if 'error' in session:
        session.pop('error', None)

    return redirect("/")


#+END_SRC

***** Google Callback response =API=
      - Once the Google verfies the user credentials it will send callback
        response to =/authorized= api which should be registered at google's
        dashboard as one of Authorized redirect URIs

      - Once the google authenticates the user, =Outreach-Portal= will
        authorize the user by providing the user dashboard based on the role of
        the user. 

#+BEGIN_SRC python :tangle api.py :eval 
@api.route('/authorized')
def authorized():
    try:
        resp = google_oauth.authorized_response()
        if resp is None:
            return redirect("/")
        session['google_token'] = (resp['access_token'], '')
        user_info = google_oauth.get('userinfo')
        email = str(user_info.data['email'])

    except Exception as e:
        session['error'] = "Error in Google Authentication : " + str(e)            
        return redirect("/")
    try:
        url_for_getting_the_user = "%s/users?email=%s" % \
                                   (APP_URL, email)
        backend_resp = requests.get(url_for_getting_the_user,
                                    headers={'email': EMAIL_FOR_GET_AUTH,
                                             'token': TOKEN_FOR_GET_AUTH})
                                             
        if (len(backend_resp.text.encode('ascii')) != 2):
            if 'error' in session:
                session.pop('error', None)

            session['email'] = email
            session['token'] = uuid.uuid4().hex
            role = backend_resp.json()[0]['role']['name'].encode('ascii')
            name = backend_resp.json()[0]['name'].encode('ascii')
            session['role'] = role
            session['name'] = name
            session['id'] = backend_resp.json()[0]['id']
            
            if role == "OC":
                return redirect("/oc")
            
            elif role == "NC":
                return redirect("/nc")
            
            elif role == "admin":
                return redirect("/admin")

        else:        
            session.pop('google_token', None)
            session['error'] = "Unauthorized Email : "+email            
            return redirect("/")
          
    except Exception as e:
        session['error'] = "Error in Outreach Authentication : "+str(e)            
        return redirect("/")

#+END_SRC
***** Google token getter
      - Once the google verfies the credentials token will be shared.
#+BEGIN_SRC python :tangle api.py :eval 
@google_oauth.tokengetter
def get_google_oauth_token():
    return session.get('google_token')

#+END_SRC

***** =Root= API
      - This API is invoked as soon as user enters domain name
        =http://outreach.vlabs.ac.in= or =http://outreach.virtual-labs.ac.in=
        and due to domain issue with Google Oauth service this api will always
        make sures that user will redirect to
        =http://outreach.virtual-labs.ac.in=
#+BEGIN_SRC python :tangle api.py :eval 
@api.route("/")
def index():
    remote_url = request.url
#    if remote_url.find("vlabs.ac.in") != -1:
#        return redirect(APP_URL)
    if remote_url.find("localhost") != -1:
        return render_template("index.html")
    else:
        return render_template("index.html")
#+END_SRC
***** Get Usage from elastic search database
      Following REST API is used to compute offline workshop usage
      from elastic search database.
****** Design
   - URL :: /get_usage

   - Method :: POST

   - Data Params ::
      {
      "mac_addr" : "<mac_id>",
      "version" : "<offline/online>",
      "date" : "dd-mm-yyyy"
      }		   

   - Success Response ::
     + Code: 200
       
     + Content:

       #+BEGIN_EXAMPLE
       {
       "status": "success"
       }
       
       #+END_EXAMPLE
       
  - Error Response ::
    + Code: 401 UNAUTHORIZED

    + Content: { error : "Not Authorized error: not Authorized to perform this action" }
      
    OR
		     
    + Code: 400 Bad Request

    + Content: { error : "Malformed arguments" }

    OR

    + Code: 500

    + Content: { error : Exception String}
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/get_usage
    #+END_EXAMPLE

****** Implementation 
#+BEGIN_SRC python :tangle api.py :eval 
@api.route("/get_usage", methods=['GET','POST'])
def get_usage():
    if request.method == 'GET':
        return "This method is not allowed"
    
    if request.method == 'POST':  
        doc_name = "feedback"
        data_dict = request.get_json()
        oldformat = str(data_dict['date'])
        datetimeobject = datetime.strptime(oldformat,'%Y-%m-%d')
        date = datetimeobject.strftime('%d-%m-%Y')
        version = str(data_dict['version'])
        current_app.logger.debug("json = %s" % (data_dict))

        if version == 'offline':
            mac_addr = str(data_dict['mac_addr'])
            index_name = "%s_%s" % (get_college_name(mac_addr), mac_addr)
        else:
            gateway_ip = str(data_dict['gateway_ip'])
            current_app.logger.debug("gateway_ip %s" % (gateway_ip))
            index_name = "vlabs"            

        ELASTIC_URL = "%s/%s/%s/_search?size=10000" % (ELASTIC_IP, index_name, doc_name)
        current_app.logger.debug("ELASTIC_URL %s" % (ELASTIC_URL))
        count = 0
        usages = requests.get(ELASTIC_URL)
        
        if usages.status_code == 200:
            current_app.logger.debug("usages %s" % (usages.json()))
            for feedback in usages.json()['hits']['hits']:
                date_of_elastic_data = feedback['_source']['date']
                if version == "offline":
                    current_app.logger.debug("date %s" % (feedback['_source']['date']))
                    if date == date_of_elastic_data:
                        current_app.logger.debug("true")
                        count = count+1                    
                else:
                    gateway_ip_of_e_db = feedback['_source']['gateway_ip']
                    current_app.logger.debug("gateway_ip %s" % (feedback['_source']['gateway_ip']))
                    if date == date_of_elastic_data and gateway_ip == gateway_ip_of_e_db:
                        current_app.logger.debug("true")
                        count = count + 1                        
            return jsonify({"usage" : count})
        elif usages.status_code == 404:
            return jsonify({"usage" : count})
        else:
            abort(int(usages.status_code), "Error in getting usage from elastic db")

#+END_SRC

***** Other GET APIs
#+BEGIN_SRC python :tangle api.py :eval 
@api.route("/ws_details")
def ws_details():
    return render_template("ws_details.html")

@api.route("/ws_details_offline")
def ws_details_offline():
    return render_template("ws_details_offline.html")

@api.route("/participants")
def participants():
    return render_template("participants.html")

@api.route("/ncentres")
def ncentres():
    return render_template("ncentres.html")

def unique(list1):

    # intilize a null list                                                                                                                                                                       
    unique_list = []

    # traverse for all elements                                                                                                                                                                  
    for x in list1:
        # check if exists in unique_list or not                                                                                                                                                  
        if x not in unique_list:
            unique_list.append(x)
    # print list                                                                                                                                                                                 
    return unique_list

@api.route("/total_ncenters")
def total_ncentres():
    url = APP_URL + '/nodal_centres';
    r = requests.get(url, headers={'email': EMAIL_FOR_GET_AUTH,
                                   'token': TOKEN_FOR_GET_AUTH});
    r.status_code
    data = r.json();

    temp_dict = []
    for n_center in range(0, len(data)):
        name = data[n_center]['created_by']['institute_name']
        created_by_id = data[n_center]['created_by']['id']
        temp_dict.append({'id': created_by_id, 'name':name})

    result = []
    for nodal_center in unique(temp_dict):
        result.append({'nodal_center': nodal_center['name'],
                       'created_by_id': nodal_center['id'],
                    'count':temp_dict.count(nodal_center)})
    return jsonify_list(result)

@api.route("/usage")
def usage():
    return render_template("usage.html")

@api.route("/admin", methods=['GET','POST'])
def admin():
    if request.method == 'GET':
	if ('email' in session) and (session['role'] == 'admin'):
	    rg = requests.get(APP_URL + "/reference_documents?user_id="+str(session['id']),
                          headers={'email': EMAIL_FOR_GET_AUTH,
                                   'token': TOKEN_FOR_GET_AUTH})
	    rg_json = json.loads(rg.text)
	    documents =  rg_json
	    return render_template("admin.html", documents=documents)
	else:
	    return redirect("/")

@api.route("/oc")
def outreach_coordinator():

    if ('email' in session) and (session['role'] == 'OC'):
	return render_template("oc.html")
    else:
	return redirect("/")

@api.route("/nc")
def nodal_coordinator():
    if ('email' in session) and (session['role'] == 'NC'):
	return render_template("nc.html")
    else:
	return redirect("/")

@api.route('/get_nc_wise_usage', methods=['GET'])
def get_nc_wise_usage():
    return_dict = {}
    if request.method == 'GET':
	usage_url = APP_URL + "/workshops?status_id=3"
	ws_usage_response = requests.get(usage_url,
                                     headers={'email': EMAIL_FOR_GET_AUTH,
                                             'token': TOKEN_FOR_GET_AUTH})
	try:
	    if ws_usage_response.ok:
		ws = ws_usage_response.text
		ws_dict = json.loads(ws)
		#print len(ws_dict)
		inst_ws_usage_dict= []
		for workshop in ws_dict:
		   # print"here"
		    user_id = workshop['user']['id']
		    user_url = APP_URL + "/users?id=" + str(user_id)
		    user_response = requests.get(user_url,
                                     headers={'email': EMAIL_FOR_GET_AUTH,
                                             'token': TOKEN_FOR_GET_AUTH})
		    try:
			if user_response.ok:
			    users = user_response.text
			    users_dict = json.loads(users)
			    if users_dict[0]['role']['id'] == 2 and \
			      users_dict[0]['institute_name'] is not None:
			       # print "users_dict = %s" % users_dict[0]
				institute_name = users_dict[0]['institute_name']
			       # print "institute_name = %s" % institute_name
				if workshop['experiments_conducted'] is None:
				    usage = 0
				else:
				    usage = workshop['experiments_conducted']
				if institute_name in return_dict:
				    return_dict[institute_name]['usage'] += \
				      usage
				    return_dict[institute_name]['workshops'] += 1
				else:
				    temp_dict = {}
				    temp_dict['usage'] = usage
				    temp_dict['workshops'] = 1
				    nc_count = get_nodal_center_count_for_OC(user_id)
				    temp_dict['nc_count'] = nc_count
                                    temp_dict['user_id'] = users_dict[0]['id']
				    return_dict[institute_name] = temp_dict

			    elif users_dict[0]['role']['id'] == 3:
			      #  print"NC user dict = %s" % users_dict[0]
				ncd_url = APP_URL + "/nodal_coordinator_details?user_id=" + str(user_id)

				ncd_response = requests.get(ncd_url,
                                     headers={'email': EMAIL_FOR_GET_AUTH,
                                             'token': TOKEN_FOR_GET_AUTH})
				try:
				    if ncd_response.ok:
					nc_users = ncd_response.text
					nc_users_dict = json.loads(nc_users)
					institute_name = nc_users_dict[0]['created_by']['institute_name']
			       #         print "NC institute_name = %s" % institute_name
					if workshop['experiments_conducted'] is None:
					    usage = 0
					else:
					    usage = workshop['experiments_conducted']
					if institute_name in return_dict:
					    return_dict[institute_name]['usage'] += \
					      usage
					    return_dict[institute_name]['workshops'] += 1
					else:
					    temp_dict = {}
					    temp_dict['usage'] = usage
					    temp_dict['workshops'] = 1
					    nc_count = get_nodal_center_count_for_OC(nc_users_dict[0]['created_by']['id'])
					    temp_dict['nc_count'] = nc_count
                                            temp_dict['user_id'] = nc_users_dict[0]['created_by']['id']
					    return_dict[institute_name]  = temp_dict
				except Exception as err:
				    raise err
		    except Exception as err:
			raise err
	except Exception as err:
	    raise err

    return jsonify(return_dict)

def get_nodal_center_count_for_OC(user_id):
    nc_count_url = APP_URL + "/nodal_centres?created_by_id=" + str(user_id)
    try:
	nc_count_response = requests.get(nc_count_url,
                                     headers={'email': EMAIL_FOR_GET_AUTH,
                                             'token': TOKEN_FOR_GET_AUTH})
	if nc_count_response.ok:
	    return len(json.loads(nc_count_response.text))
	else:
	    raise Exception("Cannot get nodal center count")

    except Exception as err:
	raise err


@api.route('/get_outreach_usage', methods=['GET'])
def get_outreach_portal_usage():
    if request.method == 'GET':
	usage_url = APP_URL + "/workshops?status_id=3"
	ws_usage_response = requests.get(usage_url,
                                     headers={'email': EMAIL_FOR_GET_AUTH,
                                             'token': TOKEN_FOR_GET_AUTH})
	try:
	    if ws_usage_response.ok:
		ws_usages = ws_usage_response.text
		ws_usage_dict = json.loads(ws_usages)
		usage=0
		participants_attended=0
		for i in range(0, len(ws_usage_dict)):
		    if ws_usage_dict[i]['experiments_conducted'] != None and \
			ws_usage_dict[i]['participants_attended'] != None:
			usage += ws_usage_dict[i]['experiments_conducted']
			participants_attended += ws_usage_dict[i]['participants_attended']
		op_usage_data = {"usage": usage, 'participants_attended': participants_attended}
		return jsonify(op_usage_data)

	except Exception as err:
	    current_app.logger.error("Exception = %s" % str(err))
	    raise err

@api.route('/get_outreach_analytics', methods=['GET'])
def get_outreach_portal_analytics():
    if request.method == 'GET':
	nc_url = APP_URL + "/nodal_centres"
	ws_url = APP_URL + "/workshops?status_id=3"
	upcoming_ws_url = APP_URL + "/workshops?status_id=1"
	usage_url = APP_URL + "/get_outreach_usage"
	nc_response = requests.get(nc_url,
                               headers={'email': EMAIL_FOR_GET_AUTH,
                                        'token': TOKEN_FOR_GET_AUTH})
	ws_response = requests.get(ws_url,
                               headers={'email': EMAIL_FOR_GET_AUTH,
                                        'token': TOKEN_FOR_GET_AUTH})
	upcoming_ws_response = requests.get(upcoming_ws_url,
                               headers={'email': EMAIL_FOR_GET_AUTH,
                                        'token': TOKEN_FOR_GET_AUTH})
                                        
	ws_usage_response = requests.get(usage_url,
                               headers={'email': EMAIL_FOR_GET_AUTH,
                                        'token': TOKEN_FOR_GET_AUTH})
                                     
	try:
	    if nc_response.ok and ws_response.ok and ws_usage_response.ok and \
		upcoming_ws_response.ok:
		nodal_centres = nc_response.text
		nodal_centre_dict = json.loads(nodal_centres)
		workshops = ws_response.text
		workshop_dict = json.loads(workshops)
		upcoming_workshops = upcoming_ws_response.text
		upcoming_workshop_dict = json.loads(upcoming_workshops)

		ws_usages = ws_usage_response.text
		ws_usage_dict = json.loads(ws_usages)
		op_anaytics_data = {"nodal_centres": len(nodal_centre_dict),
				 "workshops": len(workshop_dict),
				 "upcoming_workshops": len(upcoming_workshop_dict),                                               "usage": ws_usage_dict['usage'],
				 "participants_attended": ws_usage_dict['participants_attended'],
				    }
		return jsonify(op_anaytics_data)
	except Exception as err:
	    current_app.logger.error("Exception = %s" % str(err))
	    raise err

@api.route('/upload_reference_documents/<id>', methods=['GET', 'POST'])
def save_reference_documents(id):
    if request.method == 'GET':
	return '''
	<!doctype html>
	<title>Upload new File</title>
	<h1>Upload new File</h1>
	<form action="" method=post enctype=multipart/form-data>
	<p><input type=file name=file>
	<input type=submit value=Upload>
	</form>
	'''

    if request.method == 'POST':
	url = APP_URL + "/reference_documents/"\
	      + id
	response = requests.get(url)

	file = request.files['file']
	if response.ok:
	    file_path = upload_file(file, url)
	    return file_path
	else:
	    return "No entry for 'ReferenceDocuments' entity with given id"


@api.route('/upload_workshop_reports/<id>', methods=['GET', 'POST'])
def save_workshop_documents(id):
    if request.method == 'GET':
	return '''
	<!doctype html>
	<title>Upload new File</title>
	<h1>Upload new File</h1>
	<form action="" method=post enctype=multipart/form-data>
	<p><input type=file name=file>
	<input type=submit value=Upload>
	</form>
	'''
    if request.method == 'POST':
	url = APP_URL + "/workshop_reports/"\
	      + id
	response = requests.get(url)

	file = request.files['file']
	if response.ok:
	    file_path = upload_file(file, url)
	    return file_path
	else:
	    current_app.logger.debug("No entry for 'WorkshopReports' entity with given id, response code = %s" % response)
	    return "No entry for 'WorkshopReports' entity with given id"

def allowed_file(filename):
    return '.' in filename and \
	filename.rsplit('.', 1)[1] in set(ALLOWED_FILE_EXTENSIONS)


def upload_file(file, url):
    if file and allowed_file(file.filename):
	filename = secure_filename(file.filename)
	current_app.logger.debug("filename = %s" %
				 filename)
	outreach_directory_path = os.path.dirname(os.path.abspath(__file__))
	current_app.logger.debug("outreach_directory_path = %s" %
				 outreach_directory_path)
	dir_path = outreach_directory_path + UPLOAD_DIR_PATH
	current_app.logger.debug("dir_path = %s" %
				 dir_path)
	timestamp = datetime.utcnow().strftime("-%Y-%m-%d-%H-%M-%S.")
	file_name = filename.split(".")
	new_file_name = "%s%s%s" % (file_name[0], timestamp, file_name[1])    
	current_app.logger.debug("new_file_name = %s" %
				 new_file_name)

	file_path = "%s%s" % (dir_path, new_file_name)
	current_app.logger.debug("file_path = %s" %
				 file_path)

	db_path = "%s%s" % (UPLOAD_DIR_PATH, new_file_name)
	current_app.logger.debug("db_path = %s" %
				 db_path)
	try:
	    file.save(file_path)                   
	    current_app.logger.debug("file saved successfully")      
	except Exception, e:
	    response = requests.delete(url, headers= {'email' : str(session['email']), 'token' : str(session['token'])})
	    current_app.logger.error("Error unable to save file: " + str(e))
	    abort(500, 'error is %s' % (str(e)))

	path = {'path': db_path}
	try:
	    response = requests.put(url, data=path)
	    if response.status_code == 200:
		current_app.logger.error("db path is set successfully")
	    else:
		current_app.logger.debug("Unable to save file path in database")
		response = requests.delete(url, headers= {'email' : str(session['email']), 'token' : str(session['token'])}) # Delete the record in database

		if response.status_code == 200:
		    current_app.logger.error("Sucessfully deleted record from database")
		    ##delete the file
		    delete_file(file_path)
		    abort(500)
		else:
		    current_app.logger.error("Failed to delete record from database")
		    abort(500)
	except Exception, e:
	    abort(500, 'error is %s' % (str(e)))

	return file_path
    else:
	return "file format is not in Allowed Extensions"

def delete_file(file_path):
    try:
	if os.path.exists(file_path):
	    os.remove(file_path)
	    current_app.logger.debug("Successfully deleted file from filesystem")
    except Exception, e:
	current_app.logger.error(" IO Error: no such file or directory")
	abort(500, 'error is %s' % (str(e)))

# query an entity
# =/<:entity>s?query_param1=val1&query_param2=val2&..query_paramn=valn=
@api.route('/<entity>', methods=['GET'])
def query_an_entity(entity):
    email = str(request.headers.get('email'))
    token = str(request.headers.get('token'))
    current_app.logger.debug("email = %s, token = %s " % (email, token))

    if entity == "reference_documents" or entity == "workshop_reports":
        if email is None or token is None:
            abort(401, "Unauthorized Credentials")
    else:
        if not token or token != TOKEN_FOR_GET_AUTH:
            abort(401, "Unauthorized Credentials")

        if not email or email != EMAIL_FOR_GET_AUTH:
            abort(401, "Unauthorized Credentials")

    if entity not in entity_pairs:
	current_app.logger.error("Entity %s is not valid " % entity)    
	abort(400, 'Entity %s is not valid.' % entity)

    curr_entity = entity_pairs[entity]['entity_class']
    arg_tuple_list = request.args.lists()
    if not arg_tuple_list:
	return jsonify_list([i.to_client() for i in curr_entity.get_all()])
    else:
	query = curr_entity.query
	filters = []
	for arg_tuple in arg_tuple_list:
	    args = arg_tuple[0].split('.')
	    values = arg_tuple[1][0].split(',')
	    filters.append(create_filters(entity_pairs[entity], \
					  curr_entity, args, values))
	for filter in filters:
	    query = query.filter(filter)
	entities = query.all()
	return jsonify_list([ent.to_client() for ent in entities])

def create_filters(entity_map, curr_entity, args, values):
    if len(args) == 1:
	try:
	    return getattr(curr_entity, args[0]).in_(values)
	except Exception, e:
	    current_app.logger.error("Error is %s" % (str(e)))          
	    abort(400, 'error is %s' % (str(e)))
    else:
	result = filter(lambda item: item['name'] == args[0],
			entity_map['attributes'])
	if not result:
	    current_app.logger.error("%s is not attribute of %s"  % (args[0], str(entity_map['entity_class'])))         
	    abort(400, '%s is not attribute of %s' %
		  (args[0], str(entity_map['entity_class'])))

	entity_map = args[0]
	if result[0]['relationship'] == 'one':
	    try:
		return getattr(curr_entity, args[0]).has(
		    create_filters(entity_map, result[0]['class'], \
				   args[1:], values))
	    except Exception, e:
		current_app.logger.error("Error is %s"  % (str(e)))             
		abort(400, 'error is %s' % (str(e)))
	else:
	    try:
		return getattr(curr_entity, args[0]).any(
		    create_filters(entity_map, result[0]['class'], \
				   args[1:], values))
	    except Exception, e:
		current_app.logger.error("Error is %s"  % (str(e)))             
		abort(400, 'error is %s' % (str(e)))

@api.route('/<entity>/<id>', methods=['GET'])
def get_specific_entity(entity, id):
    email = str(request.headers.get('email'))
    token = str(request.headers.get('token'))
    current_app.logger.debug("email = %s, token = %s " % (email, token))

    if entity == "reference_documents" or entity == "workshop_reports":
        if email is None or token is None:
            abort(401, "Unauthorized Credentials")
    else:
        if not token or token != TOKEN_FOR_GET_AUTH:
            abort(401, "Unauthorized Credentials")

        if not email or email != EMAIL_FOR_GET_AUTH:
            abort(401, "Unauthorized Credentials")

    if entity not in entity_pairs:
        current_app.logger.error("Entity %s is not valid."  % entity)
        abort(400, 'Entity %s is not valid.' % entity)

    if not id.isnumeric():
        current_app.logger.error("id %s is not valid."  % id)
        abort(400, 'id %s is not valid.' % id)

    curr_entity = entity_pairs[entity]['entity_class']
    record = curr_entity.get_by_id(id)

    if not record:
        current_app.logger.error("No entry for %s with id: %s found."  % (entity, id))
        abort(404, "No entry for %s with id: %s found." % (entity, id))

    return jsonify(record.to_client())
    
#+END_SRC

** REST API to create/update/delete data
*** Implementation
**** The entity look up table with corresponding types of their attributes
#+NAME: entity-map-types
#+BEGIN_SRC python
entity_map_types = {
    'roles': {
        'entity': Role,
        'types': {
            'name': Name
        }
    },
    'users': {
        'entity': User,
        'types': {
            'name': Name,
            'email': Email,
            'phone': str,
            'institute_name': str,
            'role': Role,
            'last_active': str,
            'created': str,
            'user_status': str            
        }
    },
    'reference_documents': {
        'entity': ReferenceDocument,
        'types': {
            'name': str,
            'path': str,
            'user': User
        }
    },
    'status': {
        'entity': Status,
        'types': {
            'name': Name
        }
    },
   'institute_analytics': {
        'entity': InstituteAnalytics,
        'types': {
	    'institute_name': str,
            'total_workshops': int,
            'total_usage': int,
            'total_participants_attended': int,
            'user_id': int
        }
    },

    'nc_analytics': {
        'entity': NodalCentreAnalytics,
        'types': {
            'institute_name': str,
            'user_id': int,
            'total_nodal_centres': int
        }
    },
    'analytics': {
        'entity': Analytics,
        'types': {
            'name': str,
            'total_value': int
        }
    },

    'workshops': {
        'entity': Workshop,
        'types': {
            'name': str,
            'location': str,
            'user': User,
            'participating_institutes': str,
            'no_of_participants_expected': int,
            'participants_attended': int,
            'no_of_sessions': int,
            'duration_of_sessions': str,
            'disciplines': str,
            'labs_planned': int,
            'experiments_conducted': int,
            'other_details': str,
            'cancellation_reason': str,
            'gateway_ip': str,
            'version': str,
            'not_approval_reason': str,
            'created': datetime,
            'last_updated': str,
            'status': Status,
            'date': str,
            'workshop_status': str
        }
    },
   'nodal_centres': {
        'entity': NodalCentre,
        'types': {
            'created_by': User,
            'name': str,
            'location': str,
            'pincode': str,
            'longitude': str,
            'lattitude': str,
            'centre_status': str            
        }
    },
 
   'nodal_coordinator_details': {
        'entity': NodalCoordinatorDetail,
        'types': {
            'user': User,
            'created_by': User,
            'nodal_centre':NodalCentre,
            'last_updated': str,
            'created': datetime,
            'target_workshops': int,
            'target_participants': int,
            'target_experiments': int
        }
    },
     'workshop_reports': {
        'entity': WorkshopReport,
        'types': {
            'name':str,
            'path': str,
            'workshop': Workshop
        }
    }

}

#+END_SRC

**** The API to update/delete entries
***** API route definition
The API route definitions. Defining the =/entity/id= API for update and delete
operations. The following API handler first checks if the requested URL is a
valid entity. If not it sends back a HTTP 400. If it is a valid entity, then
it looks at the HTTP method, and calls the appropriate function to actually
delete or update an existing record.
#+NAME: modify-entity
#+BEGIN_SRC python
@api.route('/<entity>/<id>', methods=['PUT', 'DELETE'])
def modify_entity(entity, id):
    email = str(request.headers.get('email'))
    token = str(request.headers.get('token'))
    current_app.logger.debug("email = %s, token = %s " % (email, token))
    
    if entity == "reference_documents" or entity == "workshop_reports":
        if email is None or token is None:
            abort(401, "Unauthorized Credentials")
    else:
        if not token or token != str(session['token']):
            abort(401, "Unauthorized Credentials")
            
        if not email or email != str(session['email']):
            abort(401, "Unauthorized Credentials")

    if entity not in entity_map_types:
        current_app.logger.debug("Entity %s not in entity map types"  % entity)
        abort(400, 'Entity %s is not valid.' % entity)

    curr_entity = entity_map_types[entity]['entity']

    if request.method == 'DELETE':
        status = delete_record(curr_entity, id)
        return status

    if request.method == 'PUT':
        current_app.logger.debug("Updating record of %s Entity with id: %s" % (curr_entity, id))
        status = update_record(entity, curr_entity, id)
        return status
    
#+END_SRC

***** Delete Record function
The function to delete a record given an entity and a id. On success, it
returns the =id= and a ~status=success~ as a JSON. If no such record with the
given =id= is found, it return a HTTP 404 not found error. If the record is
found, but there was error deleting the record, it sends back a HTTP 500 with
corresponding error.
#+NAME: delete-record
#+BEGIN_SRC python
def delete_record(entity, id):
    record = entity.get_by_id(id)
    if not record:
        current_app.logger.debug("Record not found with id %s..." % id)
        abort(404, 'No %s exists with id %s' % (entity, id))
    else:
        try:
            if entity.__name__=="WorkshopReport" or entity.__name__=="ReferenceDocument":
                if record.path==None:
                    record.delete()
    	            current_app.logger.debug("The record of %s entity deleted sucessfully..." % entity)

                else:
                    dir_path=os.path.dirname(os.path.abspath(__file__))
                    file_loc=dir_path+record.path
                    os.remove(file_loc)
                    current_app.logger.debug("Deleted file from location %s:" % file_loc)

                    record.delete()
                    current_app.logger.debug("Deleted record of %s Entity with id: %s" % (entity, id))
            else:
                record.delete()
                current_app.logger.debug("Deleted record of %s Entity with id: %s" % (entity, id))

        except Exception, e:
	    current_app.logger.error("Error is %s"  % (str(e)))
            abort(500, str(e))

    return jsonify(id=id, status="success")

#+END_SRC

***** Update Record function
The function to update an record given the entity name, the actual entity,
=id= of the record and the request object which has the data to be updated.
Following steps:
1. Check if the record with given =id= exist.
   1. If record doesn't exist, send back a HTTP 404 error.
2. If record exist, parse the request data into a =dict=, if the =dict= is
   empty or malformed send back a HTTP 400 error.
3. Now the request =dict= contains the request data, but they are all in
   strings. To handover the data to actually operate on to update, the data
   has to be converted to correct types, looking at the lookup table which has
   the type information. This type conversion is handled by the function
   =typecast_data=.
4. Once, the data is type converted, it calls the =update= method on the
   record.
5. If the =update= is not successful, it will send back a HTTP 500 with
   corresponding error.
6. If success, it will send back a JSON with the updated record.
#+NAME: update-record
#+BEGIN_SRC python
def update_record(entity_name, entity, id):
    record = entity.get_by_id(id)

    if not record:
       	current_app.logger.debug("No %s with id %s"  % (entity_name, id))
        abort(404, "No %s with id %s" % (entity_name, id))

    data = parse_request(request)
    if not data or type(data) is not dict:
    	current_app.logger.debug("The data should be in JSON format")
        abort(400, "The data should be in JSON format")

    data = typecast_data(entity_name, data)

    try:
        record.update(**data)
    	current_app.logger.debug("The data of %s entity updated sucessfully..." % entity_name)
    except Exception, e:
	current_app.logger.error("Error is %s"  % (str(e)))
        abort(500, str(e))

    return jsonify(record.to_client())

#+END_SRC

****** Typecast Data function
The method to typecast the data. It takes in an entity, and the data in a
=dict= format; and returns another =dict= with all the values having correct
types, based on the passed entity (this information is stored in the lookup
table with entity, its attributes and their type information). The following
functions just takes each item in the data =dict=, finds out its corresponding
constructor from the type information and calls the =typecast_item= function
over it.
#+NAME: typecast-data
#+BEGIN_SRC python
def typecast_data(entity, data):
    updated_data = {}
    for attr, val in data.iteritems():
        if attr not in entity_map_types[entity]['types']:
            current_app.logger.debug("%s attribute not in %s"  % (attr, entity))
            abort(400, '%s attribute not in %s' % (attr, entity))
        const = entity_map_types[entity]['types'][attr]

        if type(val) is list:
            new_val = map(lambda item: typecast_item(const, attr, item), val)
        else:
            new_val = typecast_item(const, attr, val)

        updated_data[attr] = new_val

    return updated_data

#+END_SRC

The function takes in a constructor, the attribute name and the actual
attribute value, and returns the new value typecasted to its correct type.
If the attribute is a compound item (like that itself is a =dict=), then it
calls the =typecast_compound_item= function. Else if it is a simple attribute
it just calls the constructor over the value. If the constructor throws an
error, the function returns a HTTP 400 error.
#+NAME: typecast-item
#+BEGIN_SRC python
# take a constructor, and attr name and the actual attribute and convert the
# attribute value to its actual type
def typecast_item(const, attr, val):
    if type(val) is dict:
        new_val = typecast_compound_item(const, attr, val)
        return new_val

    try:
        new_val = const(val)
    except TypeError:
        current_app.logger.error("%s is not a valid %s"  % (val, attr))
        abort(400, '%s is not a valid %s' % (val, attr))

    return new_val

#+END_SRC

The function takes in a constructor, the attribute name and the actual
attribute value, and returns the new value typecasted to its correct type.
Here the assumption is, that the value that it has been passed is of type
=dict=, and the =dict= contains an =id= field, which means this value is an
existing record. Hence, this function calls the =get_by_id= method of the
constructor (or the type). If there is an error it sends back appropriate HTTP
error codes.
#+NAME: typecast-compound-item
#+BEGIN_SRC python
# take a constructor, and attr name and the actual attribute and convert the
# attribute value to its actual type
def typecast_compound_item(const, attr, val):
    if 'id' not in val:
        abort(400, "id attr has to be present in %s:%s" % (attr,
                                                           val))
    try:
        new_val = const.get_by_id(val['id'])
    except TypeError:
        current_app.logger.error("%s is not a valid %s"  % (val, attr))
        abort(400, '%s is not a valid %s' % (val, attr))

    if not new_val:
        current_app.logger.error("id %s of %s is not found"  % (val['id'], attr))
        abort(404, 'id %s of %s is not found' % (val['id'], attr))
    return new_val

#+END_SRC

***** Code tangle
In the below, all the above code blocks are arranged in the order the python
interpreter expects them to be.
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<entity-map-types>>

<<delete-record>>

<<typecast-compound-item>>

<<typecast-item>>

<<typecast-data>>

<<update-record>>

<<modify-entity>>
#+END_SRC

**** The API to create new entries
***** API route definition
#+NAME: create-entity
#+BEGIN_SRC python
@api.route('/<entity>', methods=['POST'])
def create_entity(entity):
    email = str(request.headers.get('email'))
    token = str(request.headers.get('token'))
    current_app.logger.debug("email = %s, token = %s " % (email, token))

    if entity == "reference_documents" or entity == "workshop_reports":
        if email is None or token is None:
            abort(401, "Unauthorized Credentials")
    else:
        if not token or token != str(session['token']):
            abort(401, "Unauthorized Credentials")
            
        if not email or email != str(session['email']):
            abort(401, "Unauthorized Credentials")
    
    if entity not in entity_map_types:
        current_app.logger.debug("Entity %s not present in entity map types"  % entity)
        abort(400, 'Entity %s is not valid.' % entity)

    curr_entity = entity_map_types[entity]['entity']
    current_app.logger.debug("current entity is %s"  % curr_entity)	

    status = create_record(entity, curr_entity)
    current_app.logger.debug("status is %s"  % status)	

    return status

#+END_SRC
***** Create Record function
#+NAME: create-record
#+BEGIN_SRC python
def create_record(entity_name, entity):

    data = parse_request(request)
    if not data or type(data) is not dict:
        current_app.logger.debug("Unsupported data...The data should be in JSON format")
        abort(400, "The data should be in JSON format")

    data = typecast_data(entity_name, data)

    try:
        new_record = entity(**data)
        new_record.save()
    except Exception, e:
        current_app.logger.error("Error is %s" % (str(e)))
        abort(500, str(e))

    return jsonify(new_record.to_client())

#+END_SRC

***** Code tangle
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<create-record>>
<<create-entity>>
#+END_SRC
      
** Testing the REST API
*** Tests for Role
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestRole(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        global session_list
        email = 'dummyuser@gmail.com'
        key = 'vlead123'
        session_list[email] = key
        
    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_roles(self):
        print "test_get_all_roles"
        role1 = Role(name=Name("Admin"))
        role1.save()
        role2 = Role(name=Name("OC"))
        role2.save()
        r = self.client.get('/roles')
        result = json.loads(r.data)
        self.assertEquals(len(result), 2)

    def test_get_one_role(self):
        print "test_get_one_role"

        role1 = Role(name=Name("Admin"))
        role1.save()
        role2 = Role(name=Name("OC"))
        role2.save()
        r = self.client.get('/roles/1')
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Admin")

    def test_update_existing_role(self):
        print "test_update_existing_role"
        role1 = Role(name=Name("Admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}

        response = self.client.put('/roles/1',
                                   data=json.dumps({'name': 'NC'}),
                                   headers=headers)
  
        result = json.loads(response.data)
        self.assertEqual(result['name'], "NC")

    def test_create_new_role(self):
        print "test_create_new_role"

        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.post('/roles',
                             data=json.dumps({'name': 'Outreach Coordinator'}),
                             headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Outreach Coordinator")

    def test_delete_role(self):
        print "test_delete_role"
        role1 = Role(name=Name("Admin"))
        role1.save()
        role2 = Role(name=Name("NC"))
        role2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.delete('/roles/1', headers=headers)
        r = self.client.get('/roles')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
    
*** Tests for User
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestUser(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        global session_list
        email = 'dummyuser@gmail.com'
        key = 'vlead123'
        session_list[email] = key

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_users(self):
        print "test_get_all_users"
        role = Role(name=Name("Admin"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()
        r = self.client.get('/users')
        result = json.loads(r.data)

        self.assertEquals(len(result), 2)

    def test_get_one_user(self):
        print "test_get_one_user"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()
        r = self.client.get('/users/1')
        result = json.loads(r.data)

        self.assertEqual(result['name'], "Joe Smith")

    def test_update_existing_user(self):
        print "test_update_existing_user"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.put('/users/1',
                            data=json.dumps({'email': 'joe@mit.edu'}),
                            headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['email'], "joe@mit.edu")

    def test_create_new_user(self):
        print "test_create_new_user"
        role = Role(name=Name("OC"))
        role.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.post('/users',
                             data=json.dumps({'name': 'Joe Smith',
                                              'email': 'joe@mit.edu',
                                              'role': role.to_client()}), headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Joe Smith")

    def test_delete_user(self):
        print "test_delete_user"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.delete('/users/1', headers=headers)
        r = self.client.get('/users')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
    
*** Tests for ReferenceDocument
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestReferenceDocument(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        global session_list
        email = 'dummyuser@gmail.com'
        key = 'vlead123'
        session_list[email] = key

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_reference_documents(self):
        print "test_get_all_reference_documents"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        document1 = ReferenceDocument(name="Attendance Sheet", user=user1)
        document1.save()
        document2 = ReferenceDocument(name="College Report", user=user1)
        document2.save()
        
        r = self.client.get('/reference_documents')
        result = json.loads(r.data)

        self.assertEquals(len(result), 2)

    def test_get_one_reference_document(self):
        print "test_get_one_reference_document"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        doc1 = ReferenceDocument(name="College Report", user=user1)
        doc1.save()
        doc2 = ReferenceDocument(name="Attendance Sheet", user=user1)
        doc2.save()
        r = self.client.get('/reference_documents/1')
        result = json.loads(r.data)

        self.assertEqual(result['name'], "College Report")

    def test_update_existing_reference_document(self):
        print "test_update_existing_reference_document"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        doc1 = ReferenceDocument(name="College Report", user=user1)
        doc1.save()

        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        
        r = self.client.put('/reference_documents/1',
                            data=json.dumps({'name': 'Feedback'}),
                            headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Feedback")

    def test_create_new_reference_document(self):
        print "test_create_new_reference_document"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.post('/reference_documents',
                             data=json.dumps({'name': 'Feedback',
                                              'user': user1.to_client()}),
                             headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Feedback")

    def test_delete_reference_document(self):
        print "test_delete_reference_document"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        doc1 = ReferenceDocument(name="Feedback", user=user1)
        doc1.save()
        doc2 = ReferenceDocument(name="College Report", user=user1)
        doc2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.delete('/reference_documents/1', headers=headers)
        r = self.client.get('/reference_documents')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
 
*** Tests for Status
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestStatus(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        global session_list
        email = 'dummyuser@gmail.com'
        key = 'vlead123'
        session_list[email] = key

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_status(self):
        print "test_get_all_status"
        status1 = Status(name=Name("Upcoming"))
        status1.save()
        status2 = Status(name=Name("Approved"))
        status2.save()
        r = self.client.get('/status')
        result = json.loads(r.data)
        self.assertEquals(len(result), 2)

    def test_get_one_status(self):
        print "test_get_one_status"
        status1 = Status(name=Name("Approved"))
        status1.save()
        status2 = Status(name=Name("Rejected"))
        status2.save()
        r = self.client.get('/status/1')
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Approved")

    def test_update_existing_status(self):
        print "test_update_existing_status"
        status1 = Status(name=Name("Approved"))
        status1.save()
        status2 = Status(name=Name("Rejected"))
        status2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.put('/status/1',
                            data=json.dumps({'name': 'Rejected'}),
                            headers=headers)
        result = json.loads(r.data)

        self.assertEqual(result['name'], "Rejected")

    def test_create_new_status(self):
        print "test_create_new_status"
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.post('/status',
                             data=json.dumps({'name': 'Pending for Approval'}),
                             headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['name'], "Pending for Approval")

    def test_delete_status(self):
        print "test_delete_status"
        status1 = Status(name=Name("Upcoming"))
        status1.save()
        status2 = Status(name=Name("Approved"))
        status2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.delete('/status/1', headers=headers)
        r = self.client.get('/status')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
    
*** Tests for Workshop
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestWorkshop(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        global session_list
        email = 'dummyuser@gmail.com'
        key = 'vlead123'
        session_list[email] = key

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_workshops(self):
        print "test_get_all_workshops"
        role = Role(name=Name("Admin"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_1.save()

        workshop_2 = Workshop(name="HCU workshop", location="HCU",
                              user=user2, participating_institutes="HCU,\
                              IIIT-Hyd", no_of_participants_expected=50,
                              no_of_sessions=2, labs_planned=2,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_2.save()

        r = self.client.get('/workshops')
        result = json.loads(r.data)

        self.assertEquals(len(result), 2)

    def test_get_one_workshop(self):
        print "test_get_one_workshop"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")

        workshop_1.save()

        r = self.client.get('/workshops/1')
        result = json.loads(r.data)
   
        self.assertEqual(result['name'], "Coordinators Training")

    def test_update_existing_workshop(self):
        print "test_update_existing_workshop"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_1.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.put('/workshops/1',
                            data=json.dumps({'location': 'HCU'}),
                            headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['location'], "HCU")

    def test_create_new_workshop(self):
        print "test_create_new_workshop"
        role = Role(name=Name("OC"))
        role.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        status = Status(name=Name("Upcoming"))
        status.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.post('/workshops',
                             data=json.dumps({'name': 'HCU workshop',
                                              'location': 'HCU',
                                              'user': user1.to_client(),
                                              'participating_institutes' : 'HCU, IIIT-Hyd',
                                              'no_of_participants_expected' : 50,
                                              'no_of_sessions' : 2,
                                              'labs_planned' : 2,
                                              'status': status.to_client(),
                                              'date' : 'Mon Nov 23 2015 06:18:26 GMT-0500 (EST)'}),
                             headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['name'], "HCU workshop")


    def test_delete_workshop(self):
        print "test_delete_workshop"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()

        status = Status(name=Name("Upcoming"))
        status.save()

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_1.save()

        workshop_2 = Workshop(name="HCU workshop", location="HCU",
                              user=user2, participating_institutes="HCU,\
                              IIIT-Hyd", no_of_participants_expected=50,
                              no_of_sessions=2, labs_planned=2,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_2.save()

        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.delete('/workshops/1', headers=headers)
        r = self.client.get('/workshops')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
    
*** Tests for Nodal Centre
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestNodalCentre(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        global session_list
        email = 'dummyuser@gmail.com'
        key = 'vlead123'
        session_list[email] = key

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_nodal_centres(self):
        print "test_get_all_nodal_centres"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=Role(name=Name("NC")))
        user2.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli", \
                                    created_by=user2)

        nodal_centre1.save()   
 
        nodal_centre2 = NodalCentre(name="HCU", location="Gachibowli", \
                                    created_by=user2)               

        nodal_centre2.save()

        r = self.client.get('/nodal_centres')
        result = json.loads(r.data)

        self.assertEquals(len(result), 2)

    def test_get_one_nodal_centre(self):
        print "test_get_one_nodal_centre"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=Role(name=Name("NC")))
        user2.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli", \
                                    created_by=user2)

        nodal_centre1.save()   

        r = self.client.get('/nodal_centres/1')
        result = json.loads(r.data)

        self.assertEqual(result['name'], "IIIT-Hyd")

    def test_create_new_nodal_centre(self):
        print "test_create_new_nodal_centre"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=Role(name=Name("NC")))
        user2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.post('/nodal_centres',
                             data=json.dumps({'created_by': user1.to_client(),
                                              'name': 'IIIT-Hyd',
                                              'location': 'Gachibowli'}),
                             headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['name'], "IIIT-Hyd")


    def test_update_existing_nodal_centre(self):
        print "test_update_existing_nodal_centre"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=Role(name=Name("NC")))
        user2.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli", \
                                    created_by=user1)

        nodal_centre1.save()
        
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.put('/nodal_centres/1',
                            data=json.dumps({'name': 'HCU'}),
                            headers=headers)

        result = json.loads(r.data)
        self.assertEqual(result['name'], "HCU")

    def test_delete_nodal_centre(self):
        print "test_delete_nodal_centre"

        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=Role(name=Name("NC")))
        user2.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli", \
                                    created_by=user1)

        nodal_centre1.save()   
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r1 = self.client.delete('/nodal_centres/1', headers=headers)

        r2 = self.client.get('/nodal_centres')
        result = json.loads(r2.data)
        self.assertEqual(len(result), 0)

#+END_SRC

*** Tests for Nodal Coordinator Details
#+BEGIN_SRC python :tangle tests/test_api.py :eval no
class TestNodalCoordinatorDetail(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        global session_list
        email = 'dummyuser@gmail.com'
        key = 'vlead123'
        session_list[email] = key

    def tearDown(self):
        db.session.remove()
        db.drop_all()


    def test_get_all_nc_details(self):
        print "test_get_all_nc_details"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()

        r = self.client.get('/nodal_coordinator_details')
        result = json.loads(r.data)

        self.assertEquals(len(result), 2)

    def test_get_one_nc_detail(self):
        print "test_get_one_nc_detail"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()

        r = self.client.get('/nodal_coordinator_details/1')
        result = json.loads(r.data)

        self.assertEqual(result['target_workshops'], 100)

    def test_update_existing_nc_details(self):
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.put('/nodal_coordinator_details/1',
                            data=json.dumps({'target_workshops': 200}),
                            headers=headers)

        result = json.loads(r.data)

        self.assertEqual(result['target_workshops'], 200)

    def test_create_new_nc_details(self):
        print "test_create_new_nc_details"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=Role(name=Name("NC")))
        user2.save()

        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli", \
                                    created_by=user1)

        nodal_centre1.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}        
        r = self.client.post('/nodal_coordinator_details',
                             data=json.dumps({'user': user2.to_client(),
                                              'target_workshops':100,
                                              'created_by':user1.to_client(),
                                              'nodal_centre':nodal_centre1.to_client(),
                                              'target_participants':1000
                             }),
                             headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['target_workshops'], 100)

    def test_delete_nc_details(self):
        print "test_delete_nc_details"
        role1 = Role(name=Name("admin"))
        role1.save()

        role2 = Role(name=Name("OC"))
        role2.save()

        role3 = Role(name=Name("NC"))
        role3.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role1)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role2)
        user2.save()

        user3 = User(name=Name("john Smith"),
                     email=Email("john@smith.com"),
                     role=role3)
        user3.save()


        nodal_centre1 = NodalCentre(name="IIIT-Hyd", location="Gachibowli",\
                                   created_by=user2)

        nodal_centre1.save()

        nodal_centre2 = NodalCentre(name="NIT", location="Warangal",\
                                   created_by=user2)

        nodal_centre2.save()

        nc_details1 = NodalCoordinatorDetail(user=user3, target_workshops=100,
                                             created_by=user2,
                                             nodal_centre=nodal_centre1,
                                             last_updated="Mon Nov 23 2015",
                                             target_experiments=800,
                                             target_participants=1000)
        nc_details1.save()

        nc_details2 = NodalCoordinatorDetail(user=user2, target_workshops=200,
                                             created_by=user2,
                                             nodal_centre=nodal_centre2,
                                             last_updated="Tue Nov 24 2015",
                                             target_experiments=800,
                                             target_participants=2000)
        nc_details2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.delete('/nodal_coordinator_details/1', headers=headers)
        r = self.client.get('/nodal_coordinator_details')
        result = json.loads(r.data)
        self.assertEqual(len(result), 1)

#+END_SRC
*** Tests for Workshop Report
#+BEGIN_SRC python :tangle tests/test_api.py :eval no 
class TestWorkshopReport(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        global session_list
        email = 'dummyuser@gmail.com'
        key = 'vlead123'
        session_list[email] = key

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_all_workshop_reports(self):
        print "test_get_all_workshop_reports"
        role = Role(name=Name("Admin"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()

        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")

        workshop_1.save()

        workshop_2 = Workshop(name="HCU workshop", location="HCU",
                              user=user2, participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=50,
                              no_of_sessions=2, labs_planned=2,
                              status=status, date="Mon Nov 23 2015 06:18:26 GMT-0500 (EST)")

        workshop_2.save()

        workshop_report1 = WorkshopReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          workshop=workshop_1)
        workshop_report1.save()

        workshop_report2 = WorkshopReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          workshop=workshop_2)
        workshop_report2.save()


        r = self.client.get('/workshop_reports')
        result = json.loads(r.data)
        self.assertEquals(len(result), 2)

    def test_get_one_workshop_report(self):
        print "test_get_one_workshop_report"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()

        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_1.save()

        workshop_report1 = WorkshopReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          workshop=workshop_1)
        workshop_report1.save()


        r = self.client.get('/workshop_reports/1')
        result = json.loads(r.data)
        self.assertEqual(result['name'], "College Report")

    def test_update_existing_workshop_report(self):
        print "test_update_existing_workshop_report"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_1.save()

        workshop_report1 = WorkshopReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          workshop=workshop_1)
        workshop_report1.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.put('/workshop_reports/1',
                            data=json.dumps({'name': 'Workshop Photos'}),
                            headers=headers)

        result = json.loads(r.data)

        self.assertEqual(result['name'], "Workshop Photos")

    def test_create_new_workshop_report(self):
        print "test_create_new_workshop_report"
        role = Role(name=Name("OC"))
        role.save()

        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()

        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")

        workshop_1.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.post('/workshop_reports',
                             data=json.dumps({ 'name' : 'College Report',
                                               'path' : '/static/uploads/college-reports/file.pdf', 
                                               'workshop': workshop_1.to_client()
                                           }),
                             headers=headers)
        result = json.loads(r.data)
        self.assertEqual(result['name'], "College Report")

    def test_delete_workshop_report(self):
        print "test_delete_workshop_report"
        role = Role(name=Name("OC"))
        role.save()
        user1 = User(name=Name("Joe Smith"),
                     email=Email("joe@smith.com"),
                     role=role)
        user1.save()
        
        user2 = User(name=Name("Will Smith"),
                     email=Email("will@smith.com"),
                     role=role)
        user2.save()
        
        status = Status(name=Name("Upcoming"))
        status.save()        

        workshop_1 = Workshop(name="Coordinators Training",
                              location="IIIT-Hyd", user=user1,
                              participating_institutes="HCU, IIIT-Hyd",
                              no_of_participants_expected=100,
                              no_of_sessions=3, labs_planned=4,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")
    
        workshop_1.save()
        
        workshop_2 = Workshop(name="HCU workshop", location="HCU",
                              user=user2, participating_institutes="HCU,\
                              IIIT-Hyd", no_of_participants_expected=50,
                              no_of_sessions=2, labs_planned=2,
                              status=status, date="Mon Nov 23 2015 06:18:26\
                              GMT-0500 (EST)")
        
        workshop_2.save()
        
        workshop_report1 = WorkshopReport(name="College Report",
                                          path="/static/uploads/college-reports/file.pdf",
                                          workshop=workshop_1)
        workshop_report1.save()

        workshop_report2 = WorkshopReport(name="Workshop Photos",
                                          path="/static/uploads/workshop-photos/photo.png",
                                          workshop=workshop_2)
        workshop_report2.save()
        headers = {'email':'dummyuser@gmail.com', 'key':'vlead123'}
        r = self.client.delete('/workshop_reports/1', headers=headers)
        r.status_code
        r = self.client.get('/workshop_reports')
        result = json.loads(r.data)
        self.assertEqual(r.status_code, 200)

#+END_SRC
    
* Run the test Cases
** Python DB Tests
#+BEGIN_SRC python :tangle tests/test_db.py :eval no

if __name__ == '__main__':
    unittest.main()

#+END_SRC

** Python REST API Tests
#+BEGIN_SRC python :tangle tests/test_api.py :eval no

if __name__ == '__main__':
    unittest.main()

#+END_SRC
* API's
  [[./api_doc.org][API Documentation]]
