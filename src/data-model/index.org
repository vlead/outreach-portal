#+TITLE: Outreach Portal Data Model
#+AUTHOR: VLEAD
#+DATE: [2016-06-03 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export
* Notation
** Sets, cardinality and relations

If =A= is a set, then
    1. =A!= denotes exactly one element of =A=.
    2. =A?= denotes at most one element of =A=.
    3. =A+= denotes  one or more elements of =A=
    4. =A*=  denotes at zero or more elements of =A=.  Often
       abbreviated as =A=.

    5. =A > B= denotes a relation /from/ =A= /to/ =B=.


** Relations and their cardinality type

A relation =r:A > B= could relate each element of =A= to
zero, one or more elements of =B=.

|--------------------------------+-----------+---+---|
| Cardinality of B               | Notation  |   |   |
|--------------------------------+-----------+---+---|
| at least zero elements of =B=. | r: A > B  |   |   |
|--------------------------------+-----------+---+---|
| at most one element of =B=     | r: A > B? |   |   |
|--------------------------------+-----------+---+---|
| at least one element of =B=    | r: A > B+ |   |   |
|--------------------------------+-----------+---+---|
| exactly one element of =B=     | r: A > B! |   |   |
|--------------------------------+-----------+---+---|
   
** Example of Entity Relationship notation
    
#+begin_example
 [email, user] : User? > Email!
#+end_example

Encodes the following items of information:

 - =email= is a relation /from/ the set =User= /to/ the set
   =Email=.

 - =User= is called the /domain/ of the relation =email=.

 - =Email= is called the /codomain/ of the relation =email=.

 - The relation =email= relates each element of =User= to
   /exactly one/ element of =Email=.  This is written as 

 #+begin_example
 email: User > Email!
 #+end_example

 - =user= is a relation /from/ the set =Email= /to/ the set
   =User=.

 - =Email= is called the /domain/ of the relation =user=.

 - =User= is called the /codomain/ of the relation =user=.

 - The relation =user= relates each element of =Email= to
   /at most one/ element of =User=.  This is written as 

 #+begin_example
 user: Email > User?
 #+end_example


* Abstract Entity Types
#+BEGIN_SRC spec :tangle spec.txt

;;; Entity Types
TYPE User
TYPE Email
TYPE Name
TYPE Role = {admin, OC, NC}
TYPE Workshop
TYPE ReferenceDocument
TYPE Status
TYPE NodalCentre
TYPE NodalCoordinatorDetails
TYPE WorkshopReport

#+END_SRC

* Relations and cardinality constraints over entity types 
For each relation, we define its inverse next to it.
#+BEGIN_SRC spec :tangle spec.txt

;;; Relations with cardinality constraints

[email, user]                          : User?                    > Email!
[name, user]                           : User                     > Name!
[role, user]                           : User                     > Role!
[workshop, user]                       : User!                    > Workshop
[workshopreport, workshop]             : Workshop!                > WorkshopReport?
[status, workshop]                     : Workshop                 > Status!
[nodalcentre, user]                    : User                     > NodalCentre? 
[nodalcentre, nodalcoordinatordetails] : NodalCoordinatorDetails  > NodalCentre!
[user, nodalcoordinatordetails]        : NodalCoordinatorDetails? > User!

#+END_SRC

** Keys

An entity =K= is called a /key for/ an entity =A= if there
is a relation =r: A? > K!=.

|-------------------------+----------|
| Entity                  | Key      |
|-------------------------+----------|
| User                    | Email    |
|-------------------------+----------|
| WorkshopReport          | Workshop |
|-------------------------+----------|
| NodalCoordinatorDetails | User     |
|-------------------------+----------|


* System state
  The system's state is captured by a set of /state
  variables/.  
** Primary Entity sets

For the purpose of /the application/, we maintain five primary
state variables.  

 #+BEGIN_SRC spec

;;; Primary state variables
 user-set                : set[User]               ; set of users in the system
 workshop-set            : set[Workshops]          ; set of workshops in the system
 nodal-centre-set        : set[NodalCentre]        ; set of nodal centres
 reference-documents-set : set[ReferenceDocuments] ; set of reference documents
 workshop-reports-set    : set[WorkshopReports]    ; set of Workshop Reports
 
 #+END_SRC

** Derived Entity sets
#+BEGIN_SRC spec :tangle spec.txt

;;; Derived Entity sets
 email-set      : set[Email]   = user-set.email                ; set of emails in the system
 name-set       : set[Name]    = user-set.name                 ; set of names in the system
 role-set       : set[Role]    = user-set.role                 ; set of all roles of all users
 admin-user-set : set[Users]   = admin-user-set.role = "admin" ; set of all users who are admins
 
 
#+END_SRC

** Referential Integrity Constraints over entity-sets

*** =user-set=

There is atleast one user  whose role is =admin=.

    #+BEGIN_SRC spec :tangle spec.txt

    ;;; The admin-user

    For all elements u in admin-user-set, u belongs to user-set  ; there is atleast
                                                                 ; one user with
                                                                 ; role admin.
    #+END_SRC

These specifications also capture referential integrity.
#+BEGIN_SRC spec :tangle spec.txt

;;; Relation variables with Referential Integrity
[email, user]    :  user-set!    > email-set!
[name, users]    :  user-set+    > name-set!    
[role, users]    :  user-set+    > role-set!   

#+END_SRC

* Operations 
CRUD operations.  

Each operation is performed on an entity instance or an
entity-set.   The operation may take additional parameters.
It also takes as a  parameter of the credentials of the
actor performing the operation.

 - C  create a user      
 - R  read from a user   
 - U  update a user      
 - D  delete a user      

** Actor
Operations are performed by Actors.  Our application has one
type of actor:  =user=. 

These 'get' and 'set' methods are similar and common for all the entities.
The CRUD operations are done in the REST API layer, not the db layer.

|--------------------+-------------+-----------+---------------------------------|
| Operation          | Actor       | Ref.      | Result                          |
|                    | Credentials | Integrity |                                 |
|--------------------+-------------+-----------+---------------------------------|
| getAll()           | N/A         | N/A       | Return all users                |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| getById(id)        | N/A         | N/A       | Return user with particluar id  |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| getInstituteName() | N/A         | N/A       | Return institute name of a user |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| getCreated()       | N/A         | N/A       | Return created timestamp        |
|--------------------+-------------+-----------+---------------------------------|
| getLastActive()    | N/A         | N/A       | Return last active of user      |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| getEmail()         | N/A         | N/A       | Return email of user            |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| getName()          | N/A         | N/A       | Return name of user             |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| getRole()          | N/A         | N/A       | Return role of user             |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| setEmail(e:Email)  | N/A         | N/A       | Sets email of a user            |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| setName(n:Name)    | N/A         | N/A       | Sets name of a user             |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| setLastActive()    | N/A         | N/A       | Sets last active of user        |
|                    |             |           |                                 |
|                    |             |           |                                 |
|--------------------+-------------+-----------+---------------------------------|
| setInstituteName() | N/A         | N/A       | Sets institute name of user     |
|--------------------+-------------+-----------+---------------------------------|
| setTOC()           | N/A         | N/A       | Sets Time of creation           |
|--------------------+-------------+-----------+---------------------------------|
| setRole()          | N/A         | N/A       | Sets role of user               |
|--------------------+-------------+-----------+---------------------------------|
| toClient()         | N/A         | N/A       | Returns data of user            |
|--------------------+-------------+-----------+---------------------------------|









